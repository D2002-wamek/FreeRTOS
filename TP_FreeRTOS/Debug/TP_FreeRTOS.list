
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005490  08005490  00006490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005514  08005514  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800551c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000419c  2000006c  08005588  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004208  08005588  00007208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f45f  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029dc  00000000  00000000  000164fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00018ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b3  00000000  00000000  00019ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028310  00000000  00000000  0001a55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce0  00000000  00000000  0004286b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1f36  00000000  00000000  0005354b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  001454c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00148d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005478 	.word	0x08005478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005478 	.word	0x08005478

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000008c 	.word	0x2000008c
 8000530:	200000e0 	.word	0x200000e0

08000534 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <MX_FREERTOS_Init+0x30>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f88e 	bl	8003672 <osThreadCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a03      	ldr	r2, [pc, #12]	@ (8000568 <MX_FREERTOS_Init+0x34>)
 800055a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */


  /* USER CODE END RTOS_THREADS */

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bdb0      	pop	{r4, r5, r7, pc}
 8000564:	0800549c 	.word	0x0800549c
 8000568:	20000088 	.word	0x20000088

0800056c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	  for(;;)
	  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1); // Changer l'état de la LED
 8000574:	2102      	movs	r1, #2
 8000576:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <StartDefaultTask+0x3c>)
 8000578:	f001 fa71 	bl	8001a5e <HAL_GPIO_TogglePin>

	    char msg[] = "LED change d'etat\r\n";
 800057c:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <StartDefaultTask+0x40>)
 800057e:	f107 040c 	add.w	r4, r7, #12
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	682b      	ldr	r3, [r5, #0]
 800058a:	6023      	str	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg)-1, HAL_MAX_DELAY);
 800058c:	f107 010c 	add.w	r1, r7, #12
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2213      	movs	r2, #19
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <StartDefaultTask+0x44>)
 8000598:	f002 fb94 	bl	8002cc4 <HAL_UART_Transmit>

	    osDelay(100 / portTICK_PERIOD_MS); // Pause de 100 ms
 800059c:	2064      	movs	r0, #100	@ 0x64
 800059e:	f003 f8b4 	bl	800370a <osDelay>
	  {
 80005a2:	bf00      	nop
 80005a4:	e7e6      	b.n	8000574 <StartDefaultTask+0x8>
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000
 80005ac:	080054b8 	.word	0x080054b8
 80005b0:	200002e4 	.word	0x200002e4

080005b4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	@ 0x40
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4bad      	ldr	r3, [pc, #692]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4aac      	ldr	r2, [pc, #688]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4baa      	ldr	r3, [pc, #680]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e2:	4ba7      	ldr	r3, [pc, #668]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4aa6      	ldr	r2, [pc, #664]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4ba4      	ldr	r3, [pc, #656]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80005f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4ba1      	ldr	r3, [pc, #644]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4aa0      	ldr	r2, [pc, #640]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b9e      	ldr	r3, [pc, #632]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	623b      	str	r3, [r7, #32]
 8000610:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b9b      	ldr	r3, [pc, #620]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a9a      	ldr	r2, [pc, #616]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b98      	ldr	r3, [pc, #608]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b95      	ldr	r3, [pc, #596]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a94      	ldr	r2, [pc, #592]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b92      	ldr	r3, [pc, #584]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b8f      	ldr	r3, [pc, #572]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a8e      	ldr	r2, [pc, #568]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b8c      	ldr	r3, [pc, #560]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065a:	4b89      	ldr	r3, [pc, #548]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a88      	ldr	r2, [pc, #544]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000660:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b86      	ldr	r3, [pc, #536]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000672:	4b83      	ldr	r3, [pc, #524]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a82      	ldr	r2, [pc, #520]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b80      	ldr	r3, [pc, #512]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800068a:	4b7d      	ldr	r3, [pc, #500]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a7c      	ldr	r2, [pc, #496]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000690:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b7a      	ldr	r3, [pc, #488]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b77      	ldr	r3, [pc, #476]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a76      	ldr	r2, [pc, #472]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b74      	ldr	r3, [pc, #464]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a70      	ldr	r2, [pc, #448]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000880 <MX_GPIO_Init+0x2cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	486b      	ldr	r0, [pc, #428]	@ (8000884 <MX_GPIO_Init+0x2d0>)
 80006d8:	f001 f9a8 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f241 010e 	movw	r1, #4110	@ 0x100e
 80006e2:	4869      	ldr	r0, [pc, #420]	@ (8000888 <MX_GPIO_Init+0x2d4>)
 80006e4:	f001 f9a2 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2108      	movs	r1, #8
 80006ec:	4867      	ldr	r0, [pc, #412]	@ (800088c <MX_GPIO_Init+0x2d8>)
 80006ee:	f001 f99d 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	4865      	ldr	r0, [pc, #404]	@ (8000890 <MX_GPIO_Init+0x2dc>)
 80006fa:	f001 f997 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	21c8      	movs	r1, #200	@ 0xc8
 8000702:	4864      	ldr	r0, [pc, #400]	@ (8000894 <MX_GPIO_Init+0x2e0>)
 8000704:	f001 f992 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000718:	230e      	movs	r3, #14
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000720:	4619      	mov	r1, r3
 8000722:	485d      	ldr	r0, [pc, #372]	@ (8000898 <MX_GPIO_Init+0x2e4>)
 8000724:	f000 ffbe 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000728:	2308      	movs	r3, #8
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	4857      	ldr	r0, [pc, #348]	@ (8000898 <MX_GPIO_Init+0x2e4>)
 800073c:	f000 ffb2 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000740:	2304      	movs	r3, #4
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000750:	2309      	movs	r3, #9
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000758:	4619      	mov	r1, r3
 800075a:	484f      	ldr	r0, [pc, #316]	@ (8000898 <MX_GPIO_Init+0x2e4>)
 800075c:	f000 ffa2 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000760:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000772:	230b      	movs	r3, #11
 8000774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800077a:	4619      	mov	r1, r3
 800077c:	4845      	ldr	r0, [pc, #276]	@ (8000894 <MX_GPIO_Init+0x2e0>)
 800077e:	f000 ff91 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000782:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000794:	230c      	movs	r3, #12
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	483e      	ldr	r0, [pc, #248]	@ (8000898 <MX_GPIO_Init+0x2e4>)
 80007a0:	f000 ff80 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	2312      	movs	r3, #18
 80007ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b6:	2304      	movs	r3, #4
 80007b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007be:	4619      	mov	r1, r3
 80007c0:	4836      	ldr	r0, [pc, #216]	@ (800089c <MX_GPIO_Init+0x2e8>)
 80007c2:	f000 ff6f 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007c6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007d8:	230a      	movs	r3, #10
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e0:	4619      	mov	r1, r3
 80007e2:	482e      	ldr	r0, [pc, #184]	@ (800089c <MX_GPIO_Init+0x2e8>)
 80007e4:	f000 ff5e 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007e8:	2310      	movs	r3, #16
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000800:	4619      	mov	r1, r3
 8000802:	4826      	ldr	r0, [pc, #152]	@ (800089c <MX_GPIO_Init+0x2e8>)
 8000804:	f000 ff4e 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000818:	2308      	movs	r3, #8
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000820:	4619      	mov	r1, r3
 8000822:	4818      	ldr	r0, [pc, #96]	@ (8000884 <MX_GPIO_Init+0x2d0>)
 8000824:	f000 ff3e 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000828:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800083a:	230c      	movs	r3, #12
 800083c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000842:	4619      	mov	r1, r3
 8000844:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <MX_GPIO_Init+0x2ec>)
 8000846:	f000 ff2d 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800084a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800085c:	2301      	movs	r3, #1
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000864:	4619      	mov	r1, r3
 8000866:	480f      	ldr	r0, [pc, #60]	@ (80008a4 <MX_GPIO_Init+0x2f0>)
 8000868:	f000 ff1c 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800086c:	2360      	movs	r3, #96	@ 0x60
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087c:	230d      	movs	r3, #13
 800087e:	e013      	b.n	80008a8 <MX_GPIO_Init+0x2f4>
 8000880:	40023800 	.word	0x40023800
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40022000 	.word	0x40022000
 800088c:	40022800 	.word	0x40022800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	40021800 	.word	0x40021800
 8000898:	40021000 	.word	0x40021000
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ae:	4619      	mov	r1, r3
 80008b0:	48bc      	ldr	r0, [pc, #752]	@ (8000ba4 <MX_GPIO_Init+0x5f0>)
 80008b2:	f000 fef7 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008c6:	230a      	movs	r3, #10
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	48b5      	ldr	r0, [pc, #724]	@ (8000ba8 <MX_GPIO_Init+0x5f4>)
 80008d2:	f000 fee7 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008d6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	48ae      	ldr	r0, [pc, #696]	@ (8000bac <MX_GPIO_Init+0x5f8>)
 80008f4:	f000 fed6 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008f8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800090a:	230e      	movs	r3, #14
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	4619      	mov	r1, r3
 8000914:	48a6      	ldr	r0, [pc, #664]	@ (8000bb0 <MX_GPIO_Init+0x5fc>)
 8000916:	f000 fec5 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800091a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800092c:	4619      	mov	r1, r3
 800092e:	48a0      	ldr	r0, [pc, #640]	@ (8000bb0 <MX_GPIO_Init+0x5fc>)
 8000930:	f000 feb8 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000938:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	489a      	ldr	r0, [pc, #616]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 800094a:	f000 feab 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800094e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000960:	230c      	movs	r3, #12
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	4892      	ldr	r0, [pc, #584]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 800096c:	f000 fe9a 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000970:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000982:	230a      	movs	r3, #10
 8000984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	488a      	ldr	r0, [pc, #552]	@ (8000bb8 <MX_GPIO_Init+0x604>)
 800098e:	f000 fe89 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000992:	23f0      	movs	r3, #240	@ 0xf0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009a2:	230a      	movs	r3, #10
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4883      	ldr	r0, [pc, #524]	@ (8000bbc <MX_GPIO_Init+0x608>)
 80009ae:	f000 fe79 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009b2:	23f7      	movs	r3, #247	@ 0xf7
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c2:	230e      	movs	r3, #14
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ca:	4619      	mov	r1, r3
 80009cc:	487c      	ldr	r0, [pc, #496]	@ (8000bc0 <MX_GPIO_Init+0x60c>)
 80009ce:	f000 fe69 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009e4:	2309      	movs	r3, #9
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ec:	4619      	mov	r1, r3
 80009ee:	486f      	ldr	r0, [pc, #444]	@ (8000bac <MX_GPIO_Init+0x5f8>)
 80009f0:	f000 fe58 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a06:	230a      	movs	r3, #10
 8000a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4866      	ldr	r0, [pc, #408]	@ (8000bac <MX_GPIO_Init+0x5f8>)
 8000a12:	f000 fe47 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4861      	ldr	r0, [pc, #388]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 8000a2e:	f000 fe39 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a42:	230d      	movs	r3, #13
 8000a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4859      	ldr	r0, [pc, #356]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 8000a4e:	f000 fe29 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a52:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4854      	ldr	r0, [pc, #336]	@ (8000bbc <MX_GPIO_Init+0x608>)
 8000a6c:	f000 fe1a 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a82:	4619      	mov	r1, r3
 8000a84:	484f      	ldr	r0, [pc, #316]	@ (8000bc4 <MX_GPIO_Init+0x610>)
 8000a86:	f000 fe0d 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a8a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4848      	ldr	r0, [pc, #288]	@ (8000bc8 <MX_GPIO_Init+0x614>)
 8000aa8:	f000 fdfc 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000aac:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000abe:	230e      	movs	r3, #14
 8000ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483c      	ldr	r0, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x608>)
 8000aca:	f000 fdeb 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4836      	ldr	r0, [pc, #216]	@ (8000bc0 <MX_GPIO_Init+0x60c>)
 8000ae6:	f000 fddd 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000afc:	230d      	movs	r3, #13
 8000afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b04:	4619      	mov	r1, r3
 8000b06:	4829      	ldr	r0, [pc, #164]	@ (8000bac <MX_GPIO_Init+0x5f8>)
 8000b08:	f000 fdcc 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4825      	ldr	r0, [pc, #148]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 8000b20:	f000 fdc0 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b24:	2304      	movs	r3, #4
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b34:	230c      	movs	r3, #12
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481d      	ldr	r0, [pc, #116]	@ (8000bb4 <MX_GPIO_Init+0x600>)
 8000b40:	f000 fdb0 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b44:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_GPIO_Init+0x618>)
 8000b5a:	f000 fda3 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	@ (8000bcc <MX_GPIO_Init+0x618>)
 8000b78:	f000 fd94 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b7c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b8e:	230d      	movs	r3, #13
 8000b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <MX_GPIO_Init+0x618>)
 8000b9a:	f000 fd83 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e016      	b.n	8000bd0 <MX_GPIO_Init+0x61c>
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40022400 	.word	0x40022400
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	40022800 	.word	0x40022800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40021400 	.word	0x40021400
 8000bcc:	40021c00 	.word	0x40021c00
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bde:	2302      	movs	r3, #2
 8000be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	48a6      	ldr	r0, [pc, #664]	@ (8000e84 <MX_GPIO_Init+0x8d0>)
 8000bea:	f000 fd5b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	48a0      	ldr	r0, [pc, #640]	@ (8000e84 <MX_GPIO_Init+0x8d0>)
 8000c04:	f000 fd4e 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4898      	ldr	r0, [pc, #608]	@ (8000e88 <MX_GPIO_Init+0x8d4>)
 8000c26:	f000 fd3d 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4890      	ldr	r0, [pc, #576]	@ (8000e84 <MX_GPIO_Init+0x8d0>)
 8000c42:	f000 fd2f 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c46:	23c0      	movs	r3, #192	@ 0xc0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c56:	2308      	movs	r3, #8
 8000c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	488a      	ldr	r0, [pc, #552]	@ (8000e8c <MX_GPIO_Init+0x8d8>)
 8000c62:	f000 fd1f 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c66:	2310      	movs	r3, #16
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c76:	230a      	movs	r3, #10
 8000c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4883      	ldr	r0, [pc, #524]	@ (8000e90 <MX_GPIO_Init+0x8dc>)
 8000c82:	f000 fd0f 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c86:	2328      	movs	r3, #40	@ 0x28
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c96:	230c      	movs	r3, #12
 8000c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	487b      	ldr	r0, [pc, #492]	@ (8000e90 <MX_GPIO_Init+0x8dc>)
 8000ca2:	f000 fcff 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ca6:	23c8      	movs	r3, #200	@ 0xc8
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4875      	ldr	r0, [pc, #468]	@ (8000e94 <MX_GPIO_Init+0x8e0>)
 8000cbe:	f000 fcf1 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000cc2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4870      	ldr	r0, [pc, #448]	@ (8000e98 <MX_GPIO_Init+0x8e4>)
 8000cd8:	f000 fce4 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cec:	230c      	movs	r3, #12
 8000cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4865      	ldr	r0, [pc, #404]	@ (8000e8c <MX_GPIO_Init+0x8d8>)
 8000cf8:	f000 fcd4 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	485d      	ldr	r0, [pc, #372]	@ (8000e8c <MX_GPIO_Init+0x8d8>)
 8000d18:	f000 fcc4 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d1c:	2332      	movs	r3, #50	@ 0x32
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4855      	ldr	r0, [pc, #340]	@ (8000e8c <MX_GPIO_Init+0x8d8>)
 8000d38:	f000 fcb4 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4851      	ldr	r0, [pc, #324]	@ (8000e9c <MX_GPIO_Init+0x8e8>)
 8000d58:	f000 fca4 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d5c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d6e:	2309      	movs	r3, #9
 8000d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4849      	ldr	r0, [pc, #292]	@ (8000ea0 <MX_GPIO_Init+0x8ec>)
 8000d7a:	f000 fc93 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4840      	ldr	r0, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x8e0>)
 8000d92:	f000 fc87 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d96:	2382      	movs	r3, #130	@ 0x82
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da6:	230b      	movs	r3, #11
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4835      	ldr	r0, [pc, #212]	@ (8000e88 <MX_GPIO_Init+0x8d4>)
 8000db2:	f000 fc77 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000db6:	2350      	movs	r3, #80	@ 0x50
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dc6:	230d      	movs	r3, #13
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482d      	ldr	r0, [pc, #180]	@ (8000e88 <MX_GPIO_Init+0x8d4>)
 8000dd2:	f000 fc67 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dd6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de8:	2304      	movs	r3, #4
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0x8dc>)
 8000df4:	f000 fc56 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	@ (8000e88 <MX_GPIO_Init+0x8d4>)
 8000e14:	f000 fc46 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0x8d4>)
 8000e34:	f000 fc36 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e38:	2340      	movs	r3, #64	@ 0x40
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e48:	2309      	movs	r3, #9
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <MX_GPIO_Init+0x8dc>)
 8000e54:	f000 fc26 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e58:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <MX_GPIO_Init+0x8e8>)
 8000e76:	f000 fc15 	bl	80016a4 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3740      	adds	r7, #64	@ 0x40
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40021c00 	.word	0x40021c00
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021400 	.word	0x40021400
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020c00 	.word	0x40020c00

08000ea4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <__io_putchar+0x20>)
 8000eb6:	f001 ff05 	bl	8002cc4 <HAL_UART_Transmit>
 return chr;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002e4 	.word	0x200002e4

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fa83 	bl	80013d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f82c 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f7ff fb6e 	bl	80005b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ed8:	f000 f9a2 	bl	8001220 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n==== Noyau temps reel ====\r\n");
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <main+0x5c>)
 8000ede:	f003 ff37 	bl	8004d50 <puts>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET); // LED éteinte au début
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <main+0x60>)
 8000ee8:	f000 fda0 	bl	8001a2c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000eec:	f7ff fb22 	bl	8000534 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ef0:	f002 fbb8 	bl	8003664 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_SET)
 8000ef4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <main+0x60>)
 8000efa:	f000 fd7f 	bl	80019fc <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d105      	bne.n	8000f10 <main+0x48>
	      {
	          HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET); // Allumer la LED
 8000f04:	2201      	movs	r2, #1
 8000f06:	2102      	movs	r1, #2
 8000f08:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <main+0x60>)
 8000f0a:	f000 fd8f 	bl	8001a2c <HAL_GPIO_WritePin>
 8000f0e:	e004      	b.n	8000f1a <main+0x52>
	      }
	      else
	      {
	          HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET); // Éteindre la LED
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <main+0x60>)
 8000f16:	f000 fd89 	bl	8001a2c <HAL_GPIO_WritePin>
	      }

	      HAL_Delay(10); // Anti-rebond simple
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f000 fab8 	bl	8001490 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_SET)
 8000f20:	e7e8      	b.n	8000ef4 <main+0x2c>
 8000f22:	bf00      	nop
 8000f24:	080054cc 	.word	0x080054cc
 8000f28:	40022000 	.word	0x40022000

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	@ 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	@ 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 ffe8 	bl	8004f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a2a      	ldr	r2, [pc, #168]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <SystemClock_Config+0xd4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <SystemClock_Config+0xd8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <SystemClock_Config+0xd8>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <SystemClock_Config+0xd8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f94:	2319      	movs	r3, #25
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f98:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdc2 	bl	8001b34 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fb6:	f000 f827 	bl	8001008 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fba:	f000 fd6b 	bl	8001a94 <HAL_PWREx_EnableOverDrive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fc4:	f000 f820 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 f848 	bl	800207c <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ff2:	f000 f809 	bl	8001008 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	@ 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <HAL_MspInit+0x4c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	210f      	movs	r1, #15
 800104e:	f06f 0001 	mvn.w	r0, #1
 8001052:	f000 fafe 	bl	8001652 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f9d7 	bl	8001450 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010a2:	f003 f8d7 	bl	8004254 <xTaskGetSchedulerState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d001      	beq.n	80010b0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010ac:	f003 fafc 	bl	80046a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e00a      	b.n	80010dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c6:	f3af 8000 	nop.w
 80010ca:	4601      	mov	r1, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf0      	blt.n	80010c6 <_read+0x12>
  }

  return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e009      	b.n	8001114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fecb 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf1      	blt.n	8001100 <_write+0x12>
  }
  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f003 fef4 	bl	8004fac <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20050000 	.word	0x20050000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200002e0 	.word	0x200002e0
 80011f8:	20004208 	.word	0x20004208

080011fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	@ (800127c <MX_USART1_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001264:	f001 fce0 	bl	8002c28 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f7ff fecb 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002e4 	.word	0x200002e4
 800127c:	40011000 	.word	0x40011000

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ac      	sub	sp, #176	@ 0xb0
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	2284      	movs	r2, #132	@ 0x84
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fe35 	bl	8004f10 <memset>
  if(uartHandle->Instance==USART1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a32      	ldr	r2, [pc, #200]	@ (8001374 <HAL_UART_MspInit+0xf4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d15c      	bne.n	800136a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b4:	2300      	movs	r3, #0
 80012b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 f8c3 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c8:	f7ff fe9e 	bl	8001008 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6313      	str	r3, [r2, #48]	@ 0x30
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_UART_MspInit+0xf8>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001336:	4619      	mov	r1, r3
 8001338:	4810      	ldr	r0, [pc, #64]	@ (800137c <HAL_UART_MspInit+0xfc>)
 800133a:	f000 f9b3 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001362:	4619      	mov	r1, r3
 8001364:	4806      	ldr	r0, [pc, #24]	@ (8001380 <HAL_UART_MspInit+0x100>)
 8001366:	f000 f99d 	bl	80016a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	37b0      	adds	r7, #176	@ 0xb0
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400
 8001380:	40020000 	.word	0x40020000

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001388:	f7ff ff38 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f003 fe01 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff fd87 	bl	8000ec8 <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013c8:	0800551c 	.word	0x0800551c
  ldr r2, =_sbss
 80013cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013d0:	20004208 	.word	0x20004208

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>

080013d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f92e 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e0:	200f      	movs	r0, #15
 80013e2:	f000 f805 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e6:	f7ff fe15 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f93b 	bl	800168a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f911 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	2000036c 	.word	0x2000036c

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000036c 	.word	0x2000036c

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff47 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff5c 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffb0 	bl	80015f8 <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e175      	b.n	80019b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8164 	bne.w	80019aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x56>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80be 	beq.w	80019aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <HAL_GPIO_Init+0x324>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_GPIO_Init+0x324>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b63      	ldr	r3, [pc, #396]	@ (80019c8 <HAL_GPIO_Init+0x324>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001846:	4a61      	ldr	r2, [pc, #388]	@ (80019cc <HAL_GPIO_Init+0x328>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a58      	ldr	r2, [pc, #352]	@ (80019d0 <HAL_GPIO_Init+0x32c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d037      	beq.n	80018e2 <HAL_GPIO_Init+0x23e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a57      	ldr	r2, [pc, #348]	@ (80019d4 <HAL_GPIO_Init+0x330>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_GPIO_Init+0x23a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a56      	ldr	r2, [pc, #344]	@ (80019d8 <HAL_GPIO_Init+0x334>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02b      	beq.n	80018da <HAL_GPIO_Init+0x236>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a55      	ldr	r2, [pc, #340]	@ (80019dc <HAL_GPIO_Init+0x338>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x232>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a54      	ldr	r2, [pc, #336]	@ (80019e0 <HAL_GPIO_Init+0x33c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x22e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a53      	ldr	r2, [pc, #332]	@ (80019e4 <HAL_GPIO_Init+0x340>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x22a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	@ (80019e8 <HAL_GPIO_Init+0x344>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x226>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a51      	ldr	r2, [pc, #324]	@ (80019ec <HAL_GPIO_Init+0x348>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x222>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a50      	ldr	r2, [pc, #320]	@ (80019f0 <HAL_GPIO_Init+0x34c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x21e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	@ (80019f4 <HAL_GPIO_Init+0x350>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x21a>
 80018ba:	2309      	movs	r3, #9
 80018bc:	e012      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018be:	230a      	movs	r3, #10
 80018c0:	e010      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018c2:	2308      	movs	r3, #8
 80018c4:	e00e      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00c      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e00a      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x240>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	@ (80019cc <HAL_GPIO_Init+0x328>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a29      	ldr	r2, [pc, #164]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197a:	4a1f      	ldr	r2, [pc, #124]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001980:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <HAL_GPIO_Init+0x354>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f ae86 	bls.w	80016c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40021c00 	.word	0x40021c00
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40022400 	.word	0x40022400
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	041a      	lsls	r2, r3, #16
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	400b      	ands	r3, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1d      	ldr	r2, [pc, #116]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac2:	f7ff fcd9 	bl	8001478 <HAL_GetTick>
 8001ac6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ac8:	e009      	b.n	8001ade <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001aca:	f7ff fcd5 	bl	8001478 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ad8:	d901      	bls.n	8001ade <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e022      	b.n	8001b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ade:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d1ee      	bne.n	8001aca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af8:	f7ff fcbe 	bl	8001478 <HAL_GetTick>
 8001afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001afe:	e009      	b.n	8001b14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b00:	f7ff fcba 	bl	8001478 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b0e:	d901      	bls.n	8001b14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e007      	b.n	8001b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b20:	d1ee      	bne.n	8001b00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e291      	b.n	800206e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8087 	beq.w	8001c66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b58:	4b96      	ldr	r3, [pc, #600]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d00c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b64:	4b93      	ldr	r3, [pc, #588]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
 8001b70:	4b90      	ldr	r3, [pc, #576]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d06c      	beq.n	8001c64 <HAL_RCC_OscConfig+0x130>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d168      	bne.n	8001c64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e26b      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x7a>
 8001ba0:	4b84      	ldr	r3, [pc, #528]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a83      	ldr	r2, [pc, #524]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e02e      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x9c>
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7e      	ldr	r2, [pc, #504]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xc0>
 8001bda:	4b76      	ldr	r3, [pc, #472]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b73      	ldr	r3, [pc, #460]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a72      	ldr	r2, [pc, #456]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b6c      	ldr	r3, [pc, #432]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a6b      	ldr	r2, [pc, #428]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc30 	bl	8001478 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc2c 	bl	8001478 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e21f      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b61      	ldr	r3, [pc, #388]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc1c 	bl	8001478 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc18 	bl	8001478 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e20b      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b57      	ldr	r3, [pc, #348]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x110>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d069      	beq.n	8001d46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x190>
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x17a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1df      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	493d      	ldr	r1, [pc, #244]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e040      	b.n	8001d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a38      	ldr	r2, [pc, #224]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fbce 	bl	8001478 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fbca 	bl	8001478 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1bd      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4929      	ldr	r1, [pc, #164]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
 8001d12:	e018      	b.n	8001d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbaa 	bl	8001478 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fba6 	bl	8001478 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e199      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d038      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5e:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7ff fb87 	bl	8001478 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb83 	bl	8001478 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e176      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x23a>
 8001d8c:	e01a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d92:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb6d 	bl	8001478 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fb69 	bl	8001478 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d903      	bls.n	8001db8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e15c      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
 8001db4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b91      	ldr	r3, [pc, #580]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a4 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b88      	ldr	r3, [pc, #544]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a87      	ldr	r2, [pc, #540]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b85      	ldr	r3, [pc, #532]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	@ (8002004 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002004 <HAL_RCC_OscConfig+0x4d0>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb31 	bl	8001478 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fb2d 	bl	8001478 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	@ 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e120      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	4b75      	ldr	r3, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x4d0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x31a>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e44:	4a6e      	ldr	r2, [pc, #440]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x376>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x33c>
 8001e56:	4b6a      	ldr	r3, [pc, #424]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	4a69      	ldr	r2, [pc, #420]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e62:	4b67      	ldr	r3, [pc, #412]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	4a66      	ldr	r2, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x376>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x35e>
 8001e78:	4b61      	ldr	r3, [pc, #388]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a60      	ldr	r2, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e84:	4b5e      	ldr	r3, [pc, #376]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a5d      	ldr	r2, [pc, #372]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x376>
 8001e92:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e96:	4a5a      	ldr	r2, [pc, #360]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9e:	4b58      	ldr	r3, [pc, #352]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea2:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fae1 	bl	8001478 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fadd 	bl	8001478 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0ce      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x386>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff facb 	bl	8001478 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fac7 	bl	8001478 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a4 	beq.w	800206c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d06b      	beq.n	8002008 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d149      	bne.n	8001fcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b31      	ldr	r3, [pc, #196]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a30      	ldr	r2, [pc, #192]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fa98 	bl	8001478 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff fa94 	bl	8001478 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e087      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	4a1b      	ldr	r2, [pc, #108]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa68 	bl	8001478 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff fa64 	bl	8001478 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e057      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x478>
 8001fca:	e04f      	b.n	800206c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fa4e 	bl	8001478 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff fa4a 	bl	8001478 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e03d      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4ac>
 8001ffe:	e035      	b.n	800206c <HAL_RCC_OscConfig+0x538>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x544>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d028      	beq.n	8002068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d121      	bne.n	8002068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d11a      	bne.n	8002068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800203e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d0      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4965      	ldr	r1, [pc, #404]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b63      	ldr	r3, [pc, #396]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b8      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	4b59      	ldr	r3, [pc, #356]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f4:	4b53      	ldr	r3, [pc, #332]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a52      	ldr	r2, [pc, #328]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80020fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b50      	ldr	r3, [pc, #320]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	494d      	ldr	r1, [pc, #308]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d040      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e07f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e073      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06b      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4936      	ldr	r1, [pc, #216]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002170:	f7ff f982 	bl	8001478 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7ff f97e 	bl	8001478 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e053      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d210      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	4922      	ldr	r1, [pc, #136]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e032      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4916      	ldr	r1, [pc, #88]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fa:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	490e      	ldr	r1, [pc, #56]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800220e:	f000 f821 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	490a      	ldr	r1, [pc, #40]	@ (8002248 <HAL_RCC_ClockConfig+0x1cc>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a09      	ldr	r2, [pc, #36]	@ (800224c <HAL_RCC_ClockConfig+0x1d0>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_RCC_ClockConfig+0x1d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f8de 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00
 8002244:	40023800 	.word	0x40023800
 8002248:	080054f4 	.word	0x080054f4
 800224c:	20000000 	.word	0x20000000
 8002250:	20000004 	.word	0x20000004

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b090      	sub	sp, #64	@ 0x40
 800225a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002260:	2300      	movs	r3, #0
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226c:	4b59      	ldr	r3, [pc, #356]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d00d      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x40>
 8002278:	2b08      	cmp	r3, #8
 800227a:	f200 80a1 	bhi.w	80023c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x34>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x3a>
 8002286:	e09b      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b53      	ldr	r3, [pc, #332]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800228c:	e09b      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228e:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002292:	e098      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4b4f      	ldr	r3, [pc, #316]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800229e:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d028      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2200      	movs	r2, #0
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022bc:	2100      	movs	r1, #0
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 80022c0:	fb03 f201 	mul.w	r2, r3, r1
 80022c4:	2300      	movs	r3, #0
 80022c6:	fb00 f303 	mul.w	r3, r0, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	4a43      	ldr	r2, [pc, #268]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x188>)
 80022ce:	fba0 1202 	umull	r1, r2, r0, r2
 80022d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022d4:	460a      	mov	r2, r1
 80022d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022da:	4413      	add	r3, r2
 80022dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e0:	2200      	movs	r2, #0
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	61fa      	str	r2, [r7, #28]
 80022e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022ee:	f7fd ff8f 	bl	8000210 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4613      	mov	r3, r2
 80022f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fa:	e053      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fc:	4b35      	ldr	r3, [pc, #212]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	2200      	movs	r2, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	617a      	str	r2, [r7, #20]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800230e:	f04f 0b00 	mov.w	fp, #0
 8002312:	4652      	mov	r2, sl
 8002314:	465b      	mov	r3, fp
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	0159      	lsls	r1, r3, #5
 8002320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002324:	0150      	lsls	r0, r2, #5
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	ebb2 080a 	subs.w	r8, r2, sl
 800232e:	eb63 090b 	sbc.w	r9, r3, fp
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800233e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002346:	ebb2 0408 	subs.w	r4, r2, r8
 800234a:	eb63 0509 	sbc.w	r5, r3, r9
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	00eb      	lsls	r3, r5, #3
 8002358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235c:	00e2      	lsls	r2, r4, #3
 800235e:	4614      	mov	r4, r2
 8002360:	461d      	mov	r5, r3
 8002362:	eb14 030a 	adds.w	r3, r4, sl
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	eb45 030b 	adc.w	r3, r5, fp
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237a:	4629      	mov	r1, r5
 800237c:	028b      	lsls	r3, r1, #10
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002384:	4621      	mov	r1, r4
 8002386:	028a      	lsls	r2, r1, #10
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	2200      	movs	r2, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	60fa      	str	r2, [r7, #12]
 8002394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002398:	f7fd ff3a 	bl	8000210 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3740      	adds	r7, #64	@ 0x40
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	017d7840 	.word	0x017d7840

080023e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	08005504 	.word	0x08005504

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffdc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0b5b      	lsrs	r3, r3, #13
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	08005504 	.word	0x08005504

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002470:	4b69      	ldr	r3, [pc, #420]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a68      	ldr	r2, [pc, #416]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800247a:	6093      	str	r3, [r2, #8]
 800247c:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002484:	4964      	ldr	r1, [pc, #400]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d017      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b0:	4959      	ldr	r1, [pc, #356]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024c0:	d101      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024de:	4b4e      	ldr	r3, [pc, #312]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	494a      	ldr	r1, [pc, #296]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800251a:	2301      	movs	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 808b 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	4a39      	ldr	r2, [pc, #228]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002536:	6413      	str	r3, [r2, #64]	@ 0x40
 8002538:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002544:	4b35      	ldr	r3, [pc, #212]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a34      	ldr	r2, [pc, #208]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe ff92 	bl	8001478 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe ff8e 	bl	8001478 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e357      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800256a:	4b2c      	ldr	r3, [pc, #176]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002576:	4b28      	ldr	r3, [pc, #160]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d035      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d02e      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002594:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800259c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d114      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff56 	bl	8001478 <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe ff52 	bl	8001478 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e319      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025fe:	d111      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800260c:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800260e:	400b      	ands	r3, r1
 8002610:	4901      	ldr	r1, [pc, #4]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
 8002616:	e00b      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
 8002620:	0ffffcff 	.word	0x0ffffcff
 8002624:	4baa      	ldr	r3, [pc, #680]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4aa9      	ldr	r2, [pc, #676]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	4ba7      	ldr	r3, [pc, #668]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002632:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	49a4      	ldr	r1, [pc, #656]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	4313      	orrs	r3, r2
 8002640:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d010      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800264e:	4ba0      	ldr	r3, [pc, #640]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	4a9e      	ldr	r2, [pc, #632]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800265a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800265e:	4b9c      	ldr	r3, [pc, #624]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002660:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	4999      	ldr	r1, [pc, #612]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267c:	4b94      	ldr	r3, [pc, #592]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002682:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800268a:	4991      	ldr	r1, [pc, #580]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269e:	4b8c      	ldr	r3, [pc, #560]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ac:	4988      	ldr	r1, [pc, #544]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c0:	4b83      	ldr	r3, [pc, #524]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ce:	4980      	ldr	r1, [pc, #512]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026e2:	4b7b      	ldr	r3, [pc, #492]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4977      	ldr	r1, [pc, #476]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002704:	4b72      	ldr	r3, [pc, #456]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	496f      	ldr	r1, [pc, #444]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002726:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f023 020c 	bic.w	r2, r3, #12
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002734:	4966      	ldr	r1, [pc, #408]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002748:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002756:	495e      	ldr	r1, [pc, #376]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800276a:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002778:	4955      	ldr	r1, [pc, #340]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	494d      	ldr	r1, [pc, #308]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027bc:	4944      	ldr	r1, [pc, #272]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027d0:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	493c      	ldr	r1, [pc, #240]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002800:	4933      	ldr	r1, [pc, #204]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002814:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002822:	492b      	ldr	r1, [pc, #172]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002844:	4922      	ldr	r1, [pc, #136]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002854:	d101      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	4912      	ldr	r1, [pc, #72]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028a8:	4909      	ldr	r1, [pc, #36]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d006      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80d9 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028c4:	4b02      	ldr	r3, [pc, #8]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a01      	ldr	r2, [pc, #4]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028ce:	e001      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d6:	f7fe fdcf 	bl	8001478 <HAL_GetTick>
 80028da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028de:	f7fe fdcb 	bl	8001478 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	@ 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e194      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d021      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002910:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800291e:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002924:	0e1b      	lsrs	r3, r3, #24
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	019a      	lsls	r2, r3, #6
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	4957      	ldr	r1, [pc, #348]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02e      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002976:	d129      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002978:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298c:	0f1b      	lsrs	r3, r3, #28
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	019a      	lsls	r2, r3, #6
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	071b      	lsls	r3, r3, #28
 80029ac:	493d      	ldr	r1, [pc, #244]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ba:	f023 021f 	bic.w	r2, r3, #31
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4937      	ldr	r1, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01d      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029d8:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029de:	0e1b      	lsrs	r3, r3, #24
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029e6:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ec:	0f1b      	lsrs	r3, r3, #28
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	019a      	lsls	r2, r3, #6
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	071b      	lsls	r3, r3, #28
 8002a0c:	4925      	ldr	r1, [pc, #148]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	019a      	lsls	r2, r3, #6
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	071b      	lsls	r3, r3, #28
 8002a3c:	4919      	ldr	r1, [pc, #100]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fd12 	bl	8001478 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a58:	f7fe fd0e 	bl	8001478 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0d7      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f040 80cd 	bne.w	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a08      	ldr	r2, [pc, #32]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fcf5 	bl	8001478 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a92:	f7fe fcf1 	bl	8001478 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	@ 0x64
 8002a9e:	d903      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0ba      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002aa4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ab4:	d0ed      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02e      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12a      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ade:	4b51      	ldr	r3, [pc, #324]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aec:	4b4d      	ldr	r3, [pc, #308]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	0f1b      	lsrs	r3, r3, #28
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	019a      	lsls	r2, r3, #6
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	061b      	lsls	r3, r3, #24
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	4944      	ldr	r1, [pc, #272]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b1a:	4b42      	ldr	r3, [pc, #264]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b20:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	493d      	ldr	r1, [pc, #244]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d022      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b48:	d11d      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b4a:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b50:	0e1b      	lsrs	r3, r3, #24
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b58:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	0f1b      	lsrs	r3, r3, #28
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	019a      	lsls	r2, r3, #6
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	071b      	lsls	r3, r3, #28
 8002b7e:	4929      	ldr	r1, [pc, #164]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b98:	0e1b      	lsrs	r3, r3, #24
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	019a      	lsls	r2, r3, #6
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	071b      	lsls	r3, r3, #28
 8002bc6:	4917      	ldr	r1, [pc, #92]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	4911      	ldr	r1, [pc, #68]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fc42 	bl	8001478 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bf8:	f7fe fc3e 	bl	8001478 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e007      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c16:	d1ef      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e040      	b.n	8002cbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fb18 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	@ 0x24
 8002c54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fb16 	bl	80032a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8af 	bl	8002dd8 <UART_SetConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01b      	b.n	8002cbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fb95 	bl	80033e4 <UART_CheckIdleState>
 8002cba:	4603      	mov	r3, r0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d177      	bne.n	8002dcc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Transmit+0x24>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e070      	b.n	8002dce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2221      	movs	r2, #33	@ 0x21
 8002cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fbbd 	bl	8001478 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x68>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e02f      	b.n	8002d96 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fba6 	bl	8003492 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e03b      	b.n	8002dce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e007      	b.n	8002d84 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1c9      	bne.n	8002d36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2140      	movs	r1, #64	@ 0x40
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fb70 	bl	8003492 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e005      	b.n	8002dce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4ba6      	ldr	r3, [pc, #664]	@ (800309c <UART_SetConfig+0x2c4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a94      	ldr	r2, [pc, #592]	@ (80030a0 <UART_SetConfig+0x2c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d120      	bne.n	8002e96 <UART_SetConfig+0xbe>
 8002e54:	4b93      	ldr	r3, [pc, #588]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d816      	bhi.n	8002e90 <UART_SetConfig+0xb8>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <UART_SetConfig+0x90>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e85 	.word	0x08002e85
 8002e70:	08002e7f 	.word	0x08002e7f
 8002e74:	08002e8b 	.word	0x08002e8b
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e150      	b.n	8003120 <UART_SetConfig+0x348>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e14d      	b.n	8003120 <UART_SetConfig+0x348>
 8002e84:	2304      	movs	r3, #4
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e14a      	b.n	8003120 <UART_SetConfig+0x348>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e147      	b.n	8003120 <UART_SetConfig+0x348>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e144      	b.n	8003120 <UART_SetConfig+0x348>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a83      	ldr	r2, [pc, #524]	@ (80030a8 <UART_SetConfig+0x2d0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d132      	bne.n	8002f06 <UART_SetConfig+0x12e>
 8002ea0:	4b80      	ldr	r3, [pc, #512]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d828      	bhi.n	8002f00 <UART_SetConfig+0x128>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <UART_SetConfig+0xdc>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	08002f01 	.word	0x08002f01
 8002ebc:	08002f01 	.word	0x08002f01
 8002ec0:	08002f01 	.word	0x08002f01
 8002ec4:	08002ef5 	.word	0x08002ef5
 8002ec8:	08002f01 	.word	0x08002f01
 8002ecc:	08002f01 	.word	0x08002f01
 8002ed0:	08002f01 	.word	0x08002f01
 8002ed4:	08002eef 	.word	0x08002eef
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f01 	.word	0x08002f01
 8002ee4:	08002efb 	.word	0x08002efb
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e118      	b.n	8003120 <UART_SetConfig+0x348>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e115      	b.n	8003120 <UART_SetConfig+0x348>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e112      	b.n	8003120 <UART_SetConfig+0x348>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e10f      	b.n	8003120 <UART_SetConfig+0x348>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e10c      	b.n	8003120 <UART_SetConfig+0x348>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a68      	ldr	r2, [pc, #416]	@ (80030ac <UART_SetConfig+0x2d4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d120      	bne.n	8002f52 <UART_SetConfig+0x17a>
 8002f10:	4b64      	ldr	r3, [pc, #400]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f1a:	2b30      	cmp	r3, #48	@ 0x30
 8002f1c:	d013      	beq.n	8002f46 <UART_SetConfig+0x16e>
 8002f1e:	2b30      	cmp	r3, #48	@ 0x30
 8002f20:	d814      	bhi.n	8002f4c <UART_SetConfig+0x174>
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d009      	beq.n	8002f3a <UART_SetConfig+0x162>
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d810      	bhi.n	8002f4c <UART_SetConfig+0x174>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <UART_SetConfig+0x15c>
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d006      	beq.n	8002f40 <UART_SetConfig+0x168>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x174>
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e0f2      	b.n	8003120 <UART_SetConfig+0x348>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e0ef      	b.n	8003120 <UART_SetConfig+0x348>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e0ec      	b.n	8003120 <UART_SetConfig+0x348>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e0e9      	b.n	8003120 <UART_SetConfig+0x348>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e0e6      	b.n	8003120 <UART_SetConfig+0x348>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a56      	ldr	r2, [pc, #344]	@ (80030b0 <UART_SetConfig+0x2d8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d120      	bne.n	8002f9e <UART_SetConfig+0x1c6>
 8002f5c:	4b51      	ldr	r3, [pc, #324]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f68:	d013      	beq.n	8002f92 <UART_SetConfig+0x1ba>
 8002f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f6c:	d814      	bhi.n	8002f98 <UART_SetConfig+0x1c0>
 8002f6e:	2b80      	cmp	r3, #128	@ 0x80
 8002f70:	d009      	beq.n	8002f86 <UART_SetConfig+0x1ae>
 8002f72:	2b80      	cmp	r3, #128	@ 0x80
 8002f74:	d810      	bhi.n	8002f98 <UART_SetConfig+0x1c0>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <UART_SetConfig+0x1a8>
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d006      	beq.n	8002f8c <UART_SetConfig+0x1b4>
 8002f7e:	e00b      	b.n	8002f98 <UART_SetConfig+0x1c0>
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e0cc      	b.n	8003120 <UART_SetConfig+0x348>
 8002f86:	2302      	movs	r3, #2
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e0c9      	b.n	8003120 <UART_SetConfig+0x348>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e0c6      	b.n	8003120 <UART_SetConfig+0x348>
 8002f92:	2308      	movs	r3, #8
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e0c3      	b.n	8003120 <UART_SetConfig+0x348>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0c0      	b.n	8003120 <UART_SetConfig+0x348>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a44      	ldr	r2, [pc, #272]	@ (80030b4 <UART_SetConfig+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d125      	bne.n	8002ff4 <UART_SetConfig+0x21c>
 8002fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb6:	d017      	beq.n	8002fe8 <UART_SetConfig+0x210>
 8002fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fbc:	d817      	bhi.n	8002fee <UART_SetConfig+0x216>
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc2:	d00b      	beq.n	8002fdc <UART_SetConfig+0x204>
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc8:	d811      	bhi.n	8002fee <UART_SetConfig+0x216>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <UART_SetConfig+0x1fe>
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd2:	d006      	beq.n	8002fe2 <UART_SetConfig+0x20a>
 8002fd4:	e00b      	b.n	8002fee <UART_SetConfig+0x216>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e0a1      	b.n	8003120 <UART_SetConfig+0x348>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e09e      	b.n	8003120 <UART_SetConfig+0x348>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e09b      	b.n	8003120 <UART_SetConfig+0x348>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e098      	b.n	8003120 <UART_SetConfig+0x348>
 8002fee:	2310      	movs	r3, #16
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e095      	b.n	8003120 <UART_SetConfig+0x348>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80030b8 <UART_SetConfig+0x2e0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d125      	bne.n	800304a <UART_SetConfig+0x272>
 8002ffe:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800300c:	d017      	beq.n	800303e <UART_SetConfig+0x266>
 800300e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003012:	d817      	bhi.n	8003044 <UART_SetConfig+0x26c>
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003018:	d00b      	beq.n	8003032 <UART_SetConfig+0x25a>
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800301e:	d811      	bhi.n	8003044 <UART_SetConfig+0x26c>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <UART_SetConfig+0x254>
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003028:	d006      	beq.n	8003038 <UART_SetConfig+0x260>
 800302a:	e00b      	b.n	8003044 <UART_SetConfig+0x26c>
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e076      	b.n	8003120 <UART_SetConfig+0x348>
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e073      	b.n	8003120 <UART_SetConfig+0x348>
 8003038:	2304      	movs	r3, #4
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e070      	b.n	8003120 <UART_SetConfig+0x348>
 800303e:	2308      	movs	r3, #8
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e06d      	b.n	8003120 <UART_SetConfig+0x348>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e06a      	b.n	8003120 <UART_SetConfig+0x348>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <UART_SetConfig+0x2e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d138      	bne.n	80030c6 <UART_SetConfig+0x2ee>
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <UART_SetConfig+0x2cc>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800305e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003062:	d017      	beq.n	8003094 <UART_SetConfig+0x2bc>
 8003064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003068:	d82a      	bhi.n	80030c0 <UART_SetConfig+0x2e8>
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306e:	d00b      	beq.n	8003088 <UART_SetConfig+0x2b0>
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003074:	d824      	bhi.n	80030c0 <UART_SetConfig+0x2e8>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <UART_SetConfig+0x2aa>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307e:	d006      	beq.n	800308e <UART_SetConfig+0x2b6>
 8003080:	e01e      	b.n	80030c0 <UART_SetConfig+0x2e8>
 8003082:	2300      	movs	r3, #0
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e04b      	b.n	8003120 <UART_SetConfig+0x348>
 8003088:	2302      	movs	r3, #2
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e048      	b.n	8003120 <UART_SetConfig+0x348>
 800308e:	2304      	movs	r3, #4
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e045      	b.n	8003120 <UART_SetConfig+0x348>
 8003094:	2308      	movs	r3, #8
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e042      	b.n	8003120 <UART_SetConfig+0x348>
 800309a:	bf00      	nop
 800309c:	efff69f3 	.word	0xefff69f3
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40004400 	.word	0x40004400
 80030ac:	40004800 	.word	0x40004800
 80030b0:	40004c00 	.word	0x40004c00
 80030b4:	40005000 	.word	0x40005000
 80030b8:	40011400 	.word	0x40011400
 80030bc:	40007800 	.word	0x40007800
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e02c      	b.n	8003120 <UART_SetConfig+0x348>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a72      	ldr	r2, [pc, #456]	@ (8003294 <UART_SetConfig+0x4bc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d125      	bne.n	800311c <UART_SetConfig+0x344>
 80030d0:	4b71      	ldr	r3, [pc, #452]	@ (8003298 <UART_SetConfig+0x4c0>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030de:	d017      	beq.n	8003110 <UART_SetConfig+0x338>
 80030e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030e4:	d817      	bhi.n	8003116 <UART_SetConfig+0x33e>
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ea:	d00b      	beq.n	8003104 <UART_SetConfig+0x32c>
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f0:	d811      	bhi.n	8003116 <UART_SetConfig+0x33e>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <UART_SetConfig+0x326>
 80030f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030fa:	d006      	beq.n	800310a <UART_SetConfig+0x332>
 80030fc:	e00b      	b.n	8003116 <UART_SetConfig+0x33e>
 80030fe:	2300      	movs	r3, #0
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e00d      	b.n	8003120 <UART_SetConfig+0x348>
 8003104:	2302      	movs	r3, #2
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e00a      	b.n	8003120 <UART_SetConfig+0x348>
 800310a:	2304      	movs	r3, #4
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e007      	b.n	8003120 <UART_SetConfig+0x348>
 8003110:	2308      	movs	r3, #8
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e004      	b.n	8003120 <UART_SetConfig+0x348>
 8003116:	2310      	movs	r3, #16
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e001      	b.n	8003120 <UART_SetConfig+0x348>
 800311c:	2310      	movs	r3, #16
 800311e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003128:	d15b      	bne.n	80031e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d828      	bhi.n	8003182 <UART_SetConfig+0x3aa>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <UART_SetConfig+0x360>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7ff f94c 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e013      	b.n	800318c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff f95c 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e00f      	b.n	800318c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b4b      	ldr	r3, [pc, #300]	@ (800329c <UART_SetConfig+0x4c4>)
 800316e:	61bb      	str	r3, [r7, #24]
        break;
 8003170:	e00c      	b.n	800318c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7ff f86f 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8003176:	61b8      	str	r0, [r7, #24]
        break;
 8003178:	e008      	b.n	800318c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e004      	b.n	800318c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	77bb      	strb	r3, [r7, #30]
        break;
 800318a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d074      	beq.n	800327c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	005a      	lsls	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d916      	bls.n	80031dc <UART_SetConfig+0x404>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d212      	bcs.n	80031dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f023 030f 	bic.w	r3, r3, #15
 80031be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	89fa      	ldrh	r2, [r7, #14]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e04f      	b.n	800327c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	77bb      	strb	r3, [r7, #30]
 80031e0:	e04c      	b.n	800327c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d828      	bhi.n	800323a <UART_SetConfig+0x462>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x418>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800323b 	.word	0x0800323b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800323b 	.word	0x0800323b
 8003208:	0800323b 	.word	0x0800323b
 800320c:	0800323b 	.word	0x0800323b
 8003210:	08003233 	.word	0x08003233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff f8f0 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8003218:	61b8      	str	r0, [r7, #24]
        break;
 800321a:	e013      	b.n	8003244 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff f900 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b1d      	ldr	r3, [pc, #116]	@ (800329c <UART_SetConfig+0x4c4>)
 8003226:	61bb      	str	r3, [r7, #24]
        break;
 8003228:	e00c      	b.n	8003244 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7ff f813 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 800322e:	61b8      	str	r0, [r7, #24]
        break;
 8003230:	e008      	b.n	8003244 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e004      	b.n	8003244 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	77bb      	strb	r3, [r7, #30]
        break;
 8003242:	bf00      	nop
    }

    if (pclk != 0U)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d018      	beq.n	800327c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085a      	lsrs	r2, r3, #1
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d909      	bls.n	8003278 <UART_SetConfig+0x4a0>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800326a:	d205      	bcs.n	8003278 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	e001      	b.n	800327c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003288:	7fbb      	ldrb	r3, [r7, #30]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40007c00 	.word	0x40007c00
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400

080032a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01a      	beq.n	80033b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339e:	d10a      	bne.n	80033b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08c      	sub	sp, #48	@ 0x30
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f4:	f7fe f840 	bl	8001478 <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d12e      	bne.n	8003466 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f83b 	bl	8003492 <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d021      	beq.n	8003466 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	617b      	str	r3, [r7, #20]
   return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e6      	bne.n	8003422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e011      	b.n	800348a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3728      	adds	r7, #40	@ 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a2:	e04f      	b.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d04b      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fd ffe4 	bl	8001478 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04e      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d037      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b80      	cmp	r3, #128	@ 0x80
 80034d8:	d034      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b40      	cmp	r3, #64	@ 0x40
 80034de:	d031      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d110      	bne.n	8003510 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2208      	movs	r2, #8
 80034f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f838 	bl	800356c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2208      	movs	r2, #8
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e029      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351e:	d111      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003528:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f81e 	bl	800356c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e00f      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	429a      	cmp	r2, r3
 8003560:	d0a0      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b095      	sub	sp, #84	@ 0x54
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003592:	643b      	str	r3, [r7, #64]	@ 0x40
 8003594:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e6      	bne.n	8003574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d118      	bne.n	8003614 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f023 0310 	bic.w	r3, r3, #16
 80035f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6979      	ldr	r1, [r7, #20]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	613b      	str	r3, [r7, #16]
   return(result);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e6      	bne.n	80035e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003628:	bf00      	nop
 800362a:	3754      	adds	r7, #84	@ 0x54
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003646:	2b84      	cmp	r3, #132	@ 0x84
 8003648:	d005      	beq.n	8003656 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800364a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	3303      	adds	r3, #3
 8003654:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003668:	f000 faee 	bl	8003c48 <vTaskStartScheduler>
  
  return osOK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	bd80      	pop	{r7, pc}

08003672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003674:	b089      	sub	sp, #36	@ 0x24
 8003676:	af04      	add	r7, sp, #16
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <osThreadCreate+0x54>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01c      	beq.n	80036c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685c      	ldr	r4, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691e      	ldr	r6, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ffc8 	bl	8003634 <makeFreeRtosPriority>
 80036a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036ae:	9202      	str	r2, [sp, #8]
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	9100      	str	r1, [sp, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4632      	mov	r2, r6
 80036b8:	4629      	mov	r1, r5
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 f8ed 	bl	800389a <xTaskCreateStatic>
 80036c0:	4603      	mov	r3, r0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e01c      	b.n	8003700 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685c      	ldr	r4, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ffaa 	bl	8003634 <makeFreeRtosPriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	9200      	str	r2, [sp, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	4632      	mov	r2, r6
 80036ee:	4629      	mov	r1, r5
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 f938 	bl	8003966 <xTaskCreate>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <osDelay+0x16>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	e000      	b.n	8003722 <osDelay+0x18>
 8003720:	2301      	movs	r3, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa58 	bl	8003bd8 <vTaskDelay>
  
  return osOK;
 8003728:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0208 	add.w	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 0208 	add.w	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e00c      	b.n	800380e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3308      	adds	r3, #8
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e002      	b.n	8003802 <vListInsert+0x2e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d2f6      	bcs.n	80037fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6852      	ldr	r2, [r2, #4]
 8003866:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08e      	sub	sp, #56	@ 0x38
 800389e:	af04      	add	r7, sp, #16
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	b672      	cpsid	i
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	b662      	cpsie	i
 80038c2:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <xTaskCreateStatic+0x52>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	b672      	cpsid	i
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	b662      	cpsie	i
 80038e4:	61fb      	str	r3, [r7, #28]
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ec:	2354      	movs	r3, #84	@ 0x54
 80038ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b54      	cmp	r3, #84	@ 0x54
 80038f4:	d00d      	beq.n	8003912 <xTaskCreateStatic+0x78>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fa:	b672      	cpsid	i
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	b662      	cpsie	i
 800390a:	61bb      	str	r3, [r7, #24]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003912:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01e      	beq.n	8003958 <xTaskCreateStatic+0xbe>
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01b      	beq.n	8003958 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003932:	2300      	movs	r3, #0
 8003934:	9303      	str	r3, [sp, #12]
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	9302      	str	r3, [sp, #8]
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f850 	bl	80039f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003950:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003952:	f000 f8d7 	bl	8003b04 <prvAddNewTaskToReadyList>
 8003956:	e001      	b.n	800395c <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800395c:	697b      	ldr	r3, [r7, #20]
	}
 800395e:	4618      	mov	r0, r3
 8003960:	3728      	adds	r7, #40	@ 0x28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003966:	b580      	push	{r7, lr}
 8003968:	b08c      	sub	sp, #48	@ 0x30
 800396a:	af04      	add	r7, sp, #16
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fee6 	bl	800474c <pvPortMalloc>
 8003980:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00e      	beq.n	80039a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003988:	2054      	movs	r0, #84	@ 0x54
 800398a:	f000 fedf 	bl	800474c <pvPortMalloc>
 800398e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
 800399c:	e005      	b.n	80039aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f000 ffa2 	bl	80048e8 <vPortFree>
 80039a4:	e001      	b.n	80039aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	9302      	str	r3, [sp, #8]
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f80e 	bl	80039f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039d4:	69f8      	ldr	r0, [r7, #28]
 80039d6:	f000 f895 	bl	8003b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e002      	b.n	80039e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039e6:	69bb      	ldr	r3, [r7, #24]
	}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3720      	adds	r7, #32
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003a08:	440b      	add	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f023 0307 	bic.w	r3, r3, #7
 8003a16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <prvInitialiseNewTask+0x4e>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a26:	b672      	cpsid	i
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	b662      	cpsie	i
 8003a36:	617b      	str	r3, [r7, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01f      	beq.n	8003a84 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e012      	b.n	8003a70 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	7819      	ldrb	r1, [r3, #0]
 8003a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	3334      	adds	r3, #52	@ 0x34
 8003a5a:	460a      	mov	r2, r1
 8003a5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d9e9      	bls.n	8003a4a <prvInitialiseNewTask+0x5a>
 8003a76:	e000      	b.n	8003a7a <prvInitialiseNewTask+0x8a>
			{
				break;
 8003a78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a82:	e003      	b.n	8003a8c <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d901      	bls.n	8003a96 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a92:	2306      	movs	r3, #6
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fe60 	bl	8003772 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fe5b 	bl	8003772 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	f1c3 0207 	rsb	r2, r3, #7
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f000 fc39 	bl	800435c <pxPortInitialiseStack>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afc:	bf00      	nop
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b0c:	f000 fd36 	bl	800457c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b10:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a29      	ldr	r2, [pc, #164]	@ (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b1a:	4b29      	ldr	r3, [pc, #164]	@ (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b22:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b28:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <prvAddNewTaskToReadyList+0xb8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b30:	f000 fad0 	bl	80040d4 <prvInitialiseTaskLists>
 8003b34:	e00d      	b.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b36:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b3e:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d802      	bhi.n	8003b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b52:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <prvAddNewTaskToReadyList+0xc4>)
 8003b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	4a18      	ldr	r2, [pc, #96]	@ (8003bcc <prvAddNewTaskToReadyList+0xc8>)
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <prvAddNewTaskToReadyList+0xcc>)
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7ff fe01 	bl	800378c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b8a:	f000 fd2d 	bl	80045e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <prvAddNewTaskToReadyList+0xbc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <prvAddNewTaskToReadyList+0xd0>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000470 	.word	0x20000470
 8003bc0:	20000370 	.word	0x20000370
 8003bc4:	2000047c 	.word	0x2000047c
 8003bc8:	2000048c 	.word	0x2000048c
 8003bcc:	20000478 	.word	0x20000478
 8003bd0:	20000374 	.word	0x20000374
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01a      	beq.n	8003c20 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <vTaskDelay+0x68>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <vTaskDelay+0x36>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf6:	b672      	cpsid	i
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	b662      	cpsie	i
 8003c06:	60bb      	str	r3, [r7, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003c0e:	f000 f881 	bl	8003d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c12:	2100      	movs	r1, #0
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb3b 	bl	8004290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c1a:	f000 f889 	bl	8003d30 <xTaskResumeAll>
 8003c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003c26:	4b07      	ldr	r3, [pc, #28]	@ (8003c44 <vTaskDelay+0x6c>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000498 	.word	0x20000498
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c56:	463a      	mov	r2, r7
 8003c58:	1d39      	adds	r1, r7, #4
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fc4e 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	9202      	str	r2, [sp, #8]
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	460a      	mov	r2, r1
 8003c76:	4921      	ldr	r1, [pc, #132]	@ (8003cfc <vTaskStartScheduler+0xb4>)
 8003c78:	4821      	ldr	r0, [pc, #132]	@ (8003d00 <vTaskStartScheduler+0xb8>)
 8003c7a:	f7ff fe0e 	bl	800389a <xTaskCreateStatic>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4a20      	ldr	r2, [pc, #128]	@ (8003d04 <vTaskStartScheduler+0xbc>)
 8003c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <vTaskStartScheduler+0xbc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e001      	b.n	8003c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d118      	bne.n	8003cce <vTaskStartScheduler+0x86>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	b672      	cpsid	i
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	b662      	cpsie	i
 8003cb0:	613b      	str	r3, [r7, #16]
}
 8003cb2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb4:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <vTaskStartScheduler+0xc0>)
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <vTaskStartScheduler+0xc4>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <vTaskStartScheduler+0xc8>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cc8:	f000 fbda 	bl	8004480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ccc:	e011      	b.n	8003cf2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d10d      	bne.n	8003cf2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	b672      	cpsid	i
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	b662      	cpsie	i
 8003cea:	60fb      	str	r3, [r7, #12]
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <vTaskStartScheduler+0xa6>
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	080054ec 	.word	0x080054ec
 8003d00:	080040a5 	.word	0x080040a5
 8003d04:	20000494 	.word	0x20000494
 8003d08:	20000490 	.word	0x20000490
 8003d0c:	2000047c 	.word	0x2000047c
 8003d10:	20000474 	.word	0x20000474

08003d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <vTaskSuspendAll+0x18>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a03      	ldr	r2, [pc, #12]	@ (8003d2c <vTaskSuspendAll+0x18>)
 8003d20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000498 	.word	0x20000498

08003d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d3e:	4b43      	ldr	r3, [pc, #268]	@ (8003e4c <xTaskResumeAll+0x11c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <xTaskResumeAll+0x32>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	b672      	cpsid	i
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	b662      	cpsie	i
 8003d5a:	603b      	str	r3, [r7, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d62:	f000 fc0b 	bl	800457c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d66:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <xTaskResumeAll+0x11c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	4a37      	ldr	r2, [pc, #220]	@ (8003e4c <xTaskResumeAll+0x11c>)
 8003d6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d70:	4b36      	ldr	r3, [pc, #216]	@ (8003e4c <xTaskResumeAll+0x11c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d161      	bne.n	8003e3c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d78:	4b35      	ldr	r3, [pc, #212]	@ (8003e50 <xTaskResumeAll+0x120>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05d      	beq.n	8003e3c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d80:	e02e      	b.n	8003de0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d82:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <xTaskResumeAll+0x124>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3318      	adds	r3, #24
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fd59 	bl	8003846 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fd54 	bl	8003846 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <xTaskResumeAll+0x128>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	4a2a      	ldr	r2, [pc, #168]	@ (8003e58 <xTaskResumeAll+0x128>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4a27      	ldr	r2, [pc, #156]	@ (8003e5c <xTaskResumeAll+0x12c>)
 8003dbe:	441a      	add	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7ff fce0 	bl	800378c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <xTaskResumeAll+0x130>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003dda:	4b22      	ldr	r3, [pc, #136]	@ (8003e64 <xTaskResumeAll+0x134>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <xTaskResumeAll+0x124>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1cc      	bne.n	8003d82 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dee:	f000 fa11 	bl	8004214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <xTaskResumeAll+0x138>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d010      	beq.n	8003e20 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dfe:	f000 f837 	bl	8003e70 <xTaskIncrementTick>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003e08:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <xTaskResumeAll+0x134>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f1      	bne.n	8003dfe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <xTaskResumeAll+0x138>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <xTaskResumeAll+0x134>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <xTaskResumeAll+0x13c>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e3c:	f000 fbd4 	bl	80045e8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e40:	68bb      	ldr	r3, [r7, #8]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000498 	.word	0x20000498
 8003e50:	20000470 	.word	0x20000470
 8003e54:	20000430 	.word	0x20000430
 8003e58:	20000478 	.word	0x20000478
 8003e5c:	20000374 	.word	0x20000374
 8003e60:	20000370 	.word	0x20000370
 8003e64:	20000484 	.word	0x20000484
 8003e68:	20000480 	.word	0x20000480
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7a:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <xTaskIncrementTick+0x14c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f040 808b 	bne.w	8003f9a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e84:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc0 <xTaskIncrementTick+0x150>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fc0 <xTaskIncrementTick+0x150>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d123      	bne.n	8003ee0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e98:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <xTaskIncrementTick+0x154>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <xTaskIncrementTick+0x4e>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	b672      	cpsid	i
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	b662      	cpsie	i
 8003eb6:	603b      	str	r3, [r7, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <xTaskIncrementTick+0x4a>
 8003ebe:	4b41      	ldr	r3, [pc, #260]	@ (8003fc4 <xTaskIncrementTick+0x154>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	4b40      	ldr	r3, [pc, #256]	@ (8003fc8 <xTaskIncrementTick+0x158>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc4 <xTaskIncrementTick+0x154>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc8 <xTaskIncrementTick+0x158>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fcc <xTaskIncrementTick+0x15c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <xTaskIncrementTick+0x15c>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	f000 f99a 	bl	8004214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd0 <xTaskIncrementTick+0x160>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d348      	bcc.n	8003f7c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eea:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <xTaskIncrementTick+0x154>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <xTaskIncrementTick+0x160>)
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	601a      	str	r2, [r3, #0]
					break;
 8003efc:	e03e      	b.n	8003f7c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efe:	4b31      	ldr	r3, [pc, #196]	@ (8003fc4 <xTaskIncrementTick+0x154>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d203      	bcs.n	8003f1e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f16:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd0 <xTaskIncrementTick+0x160>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f1c:	e02e      	b.n	8003f7c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fc8f 	bl	8003846 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3318      	adds	r3, #24
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fc86 	bl	8003846 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	2201      	movs	r2, #1
 8003f40:	409a      	lsls	r2, r3
 8003f42:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <xTaskIncrementTick+0x164>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	4a22      	ldr	r2, [pc, #136]	@ (8003fd4 <xTaskIncrementTick+0x164>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <xTaskIncrementTick+0x168>)
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7ff fc12 	bl	800378c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <xTaskIncrementTick+0x16c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3b9      	bcc.n	8003eea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7a:	e7b6      	b.n	8003eea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <xTaskIncrementTick+0x16c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f82:	4915      	ldr	r1, [pc, #84]	@ (8003fd8 <xTaskIncrementTick+0x168>)
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d907      	bls.n	8003fa4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e004      	b.n	8003fa4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f9a:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <xTaskIncrementTick+0x170>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe0 <xTaskIncrementTick+0x170>)
 8003fa2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <xTaskIncrementTick+0x174>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fb0:	697b      	ldr	r3, [r7, #20]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000498 	.word	0x20000498
 8003fc0:	20000474 	.word	0x20000474
 8003fc4:	20000428 	.word	0x20000428
 8003fc8:	2000042c 	.word	0x2000042c
 8003fcc:	20000488 	.word	0x20000488
 8003fd0:	20000490 	.word	0x20000490
 8003fd4:	20000478 	.word	0x20000478
 8003fd8:	20000374 	.word	0x20000374
 8003fdc:	20000370 	.word	0x20000370
 8003fe0:	20000480 	.word	0x20000480
 8003fe4:	20000484 	.word	0x20000484

08003fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <vTaskSwitchContext+0xa8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ff6:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <vTaskSwitchContext+0xac>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ffc:	e042      	b.n	8004084 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003ffe:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <vTaskSwitchContext+0xac>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <vTaskSwitchContext+0xb0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f1c3 031f 	rsb	r3, r3, #31
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	4920      	ldr	r1, [pc, #128]	@ (800409c <vTaskSwitchContext+0xb4>)
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <vTaskSwitchContext+0x62>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	607b      	str	r3, [r7, #4]
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	e7fd      	b.n	8004046 <vTaskSwitchContext+0x5e>
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a11      	ldr	r2, [pc, #68]	@ (800409c <vTaskSwitchContext+0xb4>)
 8004056:	4413      	add	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	3308      	adds	r3, #8
 800406c:	429a      	cmp	r2, r3
 800406e:	d104      	bne.n	800407a <vTaskSwitchContext+0x92>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a07      	ldr	r2, [pc, #28]	@ (80040a0 <vTaskSwitchContext+0xb8>)
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	20000498 	.word	0x20000498
 8004094:	20000484 	.word	0x20000484
 8004098:	20000478 	.word	0x20000478
 800409c:	20000374 	.word	0x20000374
 80040a0:	20000370 	.word	0x20000370

080040a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040ac:	f000 f852 	bl	8004154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <prvIdleTask+0x28>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d9f9      	bls.n	80040ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <prvIdleTask+0x2c>)
 80040ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040c8:	e7f0      	b.n	80040ac <prvIdleTask+0x8>
 80040ca:	bf00      	nop
 80040cc:	20000374 	.word	0x20000374
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	e00c      	b.n	80040fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <prvInitialiseTaskLists+0x60>)
 80040ec:	4413      	add	r3, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb1f 	bl	8003732 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3301      	adds	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d9ef      	bls.n	80040e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004100:	480d      	ldr	r0, [pc, #52]	@ (8004138 <prvInitialiseTaskLists+0x64>)
 8004102:	f7ff fb16 	bl	8003732 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004106:	480d      	ldr	r0, [pc, #52]	@ (800413c <prvInitialiseTaskLists+0x68>)
 8004108:	f7ff fb13 	bl	8003732 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800410c:	480c      	ldr	r0, [pc, #48]	@ (8004140 <prvInitialiseTaskLists+0x6c>)
 800410e:	f7ff fb10 	bl	8003732 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004112:	480c      	ldr	r0, [pc, #48]	@ (8004144 <prvInitialiseTaskLists+0x70>)
 8004114:	f7ff fb0d 	bl	8003732 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004118:	480b      	ldr	r0, [pc, #44]	@ (8004148 <prvInitialiseTaskLists+0x74>)
 800411a:	f7ff fb0a 	bl	8003732 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <prvInitialiseTaskLists+0x78>)
 8004120:	4a05      	ldr	r2, [pc, #20]	@ (8004138 <prvInitialiseTaskLists+0x64>)
 8004122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004124:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <prvInitialiseTaskLists+0x7c>)
 8004126:	4a05      	ldr	r2, [pc, #20]	@ (800413c <prvInitialiseTaskLists+0x68>)
 8004128:	601a      	str	r2, [r3, #0]
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000374 	.word	0x20000374
 8004138:	20000400 	.word	0x20000400
 800413c:	20000414 	.word	0x20000414
 8004140:	20000430 	.word	0x20000430
 8004144:	20000444 	.word	0x20000444
 8004148:	2000045c 	.word	0x2000045c
 800414c:	20000428 	.word	0x20000428
 8004150:	2000042c 	.word	0x2000042c

08004154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800415a:	e019      	b.n	8004190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800415c:	f000 fa0e 	bl	800457c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <prvCheckTasksWaitingTermination+0x50>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fb6a 	bl	8003846 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <prvCheckTasksWaitingTermination+0x54>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	4a0b      	ldr	r2, [pc, #44]	@ (80041a8 <prvCheckTasksWaitingTermination+0x54>)
 800417a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <prvCheckTasksWaitingTermination+0x58>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3b01      	subs	r3, #1
 8004182:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <prvCheckTasksWaitingTermination+0x58>)
 8004184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004186:	f000 fa2f 	bl	80045e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f810 	bl	80041b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <prvCheckTasksWaitingTermination+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e1      	bne.n	800415c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000444 	.word	0x20000444
 80041a8:	20000470 	.word	0x20000470
 80041ac:	20000458 	.word	0x20000458

080041b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d108      	bne.n	80041d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb8e 	bl	80048e8 <vPortFree>
				vPortFree( pxTCB );
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb8b 	bl	80048e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041d2:	e01b      	b.n	800420c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d103      	bne.n	80041e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb82 	bl	80048e8 <vPortFree>
	}
 80041e4:	e012      	b.n	800420c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d00d      	beq.n	800420c <prvDeleteTCB+0x5c>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	b672      	cpsid	i
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	b662      	cpsie	i
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <prvDeleteTCB+0x58>
	}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421a:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <prvResetNextTaskUnblockTime+0x38>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800422c:	e008      	b.n	8004240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422e:	4b07      	ldr	r3, [pc, #28]	@ (800424c <prvResetNextTaskUnblockTime+0x38>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <prvResetNextTaskUnblockTime+0x3c>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000428 	.word	0x20000428
 8004250:	20000490 	.word	0x20000490

08004254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800425a:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <xTaskGetSchedulerState+0x34>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004262:	2301      	movs	r3, #1
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e008      	b.n	800427a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <xTaskGetSchedulerState+0x38>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004270:	2302      	movs	r3, #2
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	e001      	b.n	800427a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800427a:	687b      	ldr	r3, [r7, #4]
	}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	2000047c 	.word	0x2000047c
 800428c:	20000498 	.word	0x20000498

08004290 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800429a:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <prvAddCurrentTaskToDelayedList+0xb0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a0:	4b28      	ldr	r3, [pc, #160]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff facd 	bl	8003846 <uxListRemove>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4013      	ands	r3, r2
 80042c6:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d10a      	bne.n	80042e8 <prvAddCurrentTaskToDelayedList+0x58>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	481a      	ldr	r0, [pc, #104]	@ (800434c <prvAddCurrentTaskToDelayedList+0xbc>)
 80042e2:	f7ff fa53 	bl	800378c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042e6:	e026      	b.n	8004336 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f0:	4b14      	ldr	r3, [pc, #80]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d209      	bcs.n	8004314 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7ff fa61 	bl	80037d4 <vListInsert>
}
 8004312:	e010      	b.n	8004336 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b0a      	ldr	r3, [pc, #40]	@ (8004344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3304      	adds	r3, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7ff fa57 	bl	80037d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d202      	bcs.n	8004336 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004330:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000474 	.word	0x20000474
 8004344:	20000370 	.word	0x20000370
 8004348:	20000478 	.word	0x20000478
 800434c:	2000045c 	.word	0x2000045c
 8004350:	2000042c 	.word	0x2000042c
 8004354:	20000428 	.word	0x20000428
 8004358:	20000490 	.word	0x20000490

0800435c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b04      	subs	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b04      	subs	r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <pxPortInitialiseStack+0x64>)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b14      	subs	r3, #20
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f06f 0202 	mvn.w	r2, #2
 80043aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3b20      	subs	r3, #32
 80043b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	080043c5 	.word	0x080043c5

080043c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <prvTaskExitError+0x60>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d00d      	beq.n	80043f4 <prvTaskExitError+0x30>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	b672      	cpsid	i
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	b662      	cpsie	i
 80043ec:	60fb      	str	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <prvTaskExitError+0x2c>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	b672      	cpsid	i
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	b662      	cpsie	i
 8004408:	60bb      	str	r3, [r7, #8]
}
 800440a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800440c:	bf00      	nop
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0fc      	beq.n	800440e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000000c 	.word	0x2000000c
	...

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004458:	4808      	ldr	r0, [pc, #32]	@ (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800447a:	bf00      	nop
 800447c:	e000ed08 	.word	0xe000ed08

08004480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004486:	4b37      	ldr	r3, [pc, #220]	@ (8004564 <xPortStartScheduler+0xe4>)
 8004488:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	@ 0xff
 8004496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004568 <xPortStartScheduler+0xe8>)
 80044ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ae:	4b2f      	ldr	r3, [pc, #188]	@ (800456c <xPortStartScheduler+0xec>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044b4:	e009      	b.n	80044ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044b6:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <xPortStartScheduler+0xec>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	4a2b      	ldr	r2, [pc, #172]	@ (800456c <xPortStartScheduler+0xec>)
 80044be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b80      	cmp	r3, #128	@ 0x80
 80044d4:	d0ef      	beq.n	80044b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044d6:	4b25      	ldr	r3, [pc, #148]	@ (800456c <xPortStartScheduler+0xec>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d00d      	beq.n	80044fe <xPortStartScheduler+0x7e>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	b672      	cpsid	i
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	b662      	cpsie	i
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <xPortStartScheduler+0xec>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	4a19      	ldr	r2, [pc, #100]	@ (800456c <xPortStartScheduler+0xec>)
 8004506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004508:	4b18      	ldr	r3, [pc, #96]	@ (800456c <xPortStartScheduler+0xec>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004510:	4a16      	ldr	r2, [pc, #88]	@ (800456c <xPortStartScheduler+0xec>)
 8004512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800451c:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <xPortStartScheduler+0xf0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <xPortStartScheduler+0xf0>)
 8004522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <xPortStartScheduler+0xf0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a10      	ldr	r2, [pc, #64]	@ (8004570 <xPortStartScheduler+0xf0>)
 800452e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004534:	f000 f8dc 	bl	80046f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <xPortStartScheduler+0xf4>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800453e:	f000 f8fb 	bl	8004738 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <xPortStartScheduler+0xf8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	@ (8004578 <xPortStartScheduler+0xf8>)
 8004548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800454c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800454e:	f7ff ff83 	bl	8004458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004552:	f7ff fd49 	bl	8003fe8 <vTaskSwitchContext>
	prvTaskExitError();
 8004556:	f7ff ff35 	bl	80043c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000e400 	.word	0xe000e400
 8004568:	2000049c 	.word	0x2000049c
 800456c:	200004a0 	.word	0x200004a0
 8004570:	e000ed20 	.word	0xe000ed20
 8004574:	2000000c 	.word	0x2000000c
 8004578:	e000ef34 	.word	0xe000ef34

0800457c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	b672      	cpsid	i
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	b662      	cpsie	i
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800459a:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <vPortEnterCritical+0x64>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	4a0f      	ldr	r2, [pc, #60]	@ (80045e0 <vPortEnterCritical+0x64>)
 80045a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045a4:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <vPortEnterCritical+0x64>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d112      	bne.n	80045d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045ac:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <vPortEnterCritical+0x68>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <vPortEnterCritical+0x56>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	b672      	cpsid	i
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	b662      	cpsie	i
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <vPortEnterCritical+0x52>
	}
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ee:	4b13      	ldr	r3, [pc, #76]	@ (800463c <vPortExitCritical+0x54>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <vPortExitCritical+0x2a>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	b672      	cpsid	i
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	b662      	cpsie	i
 800460a:	607b      	str	r3, [r7, #4]
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	e7fd      	b.n	800460e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004612:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <vPortExitCritical+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a08      	ldr	r2, [pc, #32]	@ (800463c <vPortExitCritical+0x54>)
 800461a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800461c:	4b07      	ldr	r3, [pc, #28]	@ (800463c <vPortExitCritical+0x54>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <vPortExitCritical+0x48>
 8004624:	2300      	movs	r3, #0
 8004626:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800462e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000000c 	.word	0x2000000c

08004640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004640:	f3ef 8009 	mrs	r0, PSP
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4b15      	ldr	r3, [pc, #84]	@ (80046a0 <pxCurrentTCBConst>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	f01e 0f10 	tst.w	lr, #16
 8004650:	bf08      	it	eq
 8004652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	6010      	str	r0, [r2, #0]
 800465c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004664:	b672      	cpsid	i
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	b662      	cpsie	i
 8004674:	f7ff fcb8 	bl	8003fe8 <vTaskSwitchContext>
 8004678:	f04f 0000 	mov.w	r0, #0
 800467c:	f380 8811 	msr	BASEPRI, r0
 8004680:	bc09      	pop	{r0, r3}
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f01e 0f10 	tst.w	lr, #16
 800468e:	bf08      	it	eq
 8004690:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004694:	f380 8809 	msr	PSP, r0
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop

080046a0 <pxCurrentTCBConst>:
 80046a0:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	b672      	cpsid	i
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	b662      	cpsie	i
 80046c2:	607b      	str	r3, [r7, #4]
}
 80046c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046c6:	f7ff fbd3 	bl	8003e70 <xTaskIncrementTick>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046d0:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <xPortSysTickHandler+0x44>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f383 8811 	msr	BASEPRI, r3
}
 80046e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <vPortSetupTimerInterrupt+0x34>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <vPortSetupTimerInterrupt+0x38>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004700:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <vPortSetupTimerInterrupt+0x3c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0a      	ldr	r2, [pc, #40]	@ (8004730 <vPortSetupTimerInterrupt+0x40>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <vPortSetupTimerInterrupt+0x44>)
 800470e:	3b01      	subs	r3, #1
 8004710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004712:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <vPortSetupTimerInterrupt+0x34>)
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	e000e010 	.word	0xe000e010
 8004728:	e000e018 	.word	0xe000e018
 800472c:	20000000 	.word	0x20000000
 8004730:	10624dd3 	.word	0x10624dd3
 8004734:	e000e014 	.word	0xe000e014

08004738 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004738:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004748 <vPortEnableVFP+0x10>
 800473c:	6801      	ldr	r1, [r0, #0]
 800473e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004742:	6001      	str	r1, [r0, #0]
 8004744:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004746:	bf00      	nop
 8004748:	e000ed88 	.word	0xe000ed88

0800474c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004758:	f7ff fadc 	bl	8003d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800475c:	4b5d      	ldr	r3, [pc, #372]	@ (80048d4 <pvPortMalloc+0x188>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004764:	f000 f920 	bl	80049a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004768:	4b5b      	ldr	r3, [pc, #364]	@ (80048d8 <pvPortMalloc+0x18c>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8094 	bne.w	800489e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800477c:	2208      	movs	r2, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f023 0307 	bic.w	r3, r3, #7
 8004794:	3308      	adds	r3, #8
 8004796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <pvPortMalloc+0x72>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	b672      	cpsid	i
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	b662      	cpsie	i
 80047b6:	617b      	str	r3, [r7, #20]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d06c      	beq.n	800489e <pvPortMalloc+0x152>
 80047c4:	4b45      	ldr	r3, [pc, #276]	@ (80048dc <pvPortMalloc+0x190>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d867      	bhi.n	800489e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047ce:	4b44      	ldr	r3, [pc, #272]	@ (80048e0 <pvPortMalloc+0x194>)
 80047d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047d2:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <pvPortMalloc+0x194>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047d8:	e004      	b.n	80047e4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <pvPortMalloc+0xaa>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f1      	bne.n	80047da <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047f6:	4b37      	ldr	r3, [pc, #220]	@ (80048d4 <pvPortMalloc+0x188>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d04e      	beq.n	800489e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2208      	movs	r2, #8
 8004806:	4413      	add	r3, r2
 8004808:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	2308      	movs	r3, #8
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	429a      	cmp	r2, r3
 8004820:	d922      	bls.n	8004868 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00d      	beq.n	8004850 <pvPortMalloc+0x104>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	b672      	cpsid	i
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	b662      	cpsie	i
 8004848:	613b      	str	r3, [r7, #16]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	1ad2      	subs	r2, r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004862:	69b8      	ldr	r0, [r7, #24]
 8004864:	f000 f902 	bl	8004a6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004868:	4b1c      	ldr	r3, [pc, #112]	@ (80048dc <pvPortMalloc+0x190>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	4a1a      	ldr	r2, [pc, #104]	@ (80048dc <pvPortMalloc+0x190>)
 8004874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004876:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <pvPortMalloc+0x190>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <pvPortMalloc+0x198>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d203      	bcs.n	800488a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004882:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <pvPortMalloc+0x190>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a17      	ldr	r2, [pc, #92]	@ (80048e4 <pvPortMalloc+0x198>)
 8004888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <pvPortMalloc+0x18c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	431a      	orrs	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800489e:	f7ff fa47 	bl	8003d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <pvPortMalloc+0x17c>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <pvPortMalloc+0x178>
	return pvReturn;
 80048c8:	69fb      	ldr	r3, [r7, #28]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	@ 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200040ac 	.word	0x200040ac
 80048d8:	200040b8 	.word	0x200040b8
 80048dc:	200040b0 	.word	0x200040b0
 80048e0:	200040a4 	.word	0x200040a4
 80048e4:	200040b4 	.word	0x200040b4

080048e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d04e      	beq.n	8004998 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048fa:	2308      	movs	r3, #8
 80048fc:	425b      	negs	r3, r3
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4b24      	ldr	r3, [pc, #144]	@ (80049a0 <vPortFree+0xb8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <vPortFree+0x4a>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	b672      	cpsid	i
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	b662      	cpsie	i
 800492a:	60fb      	str	r3, [r7, #12]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <vPortFree+0x6e>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	b672      	cpsid	i
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	b662      	cpsie	i
 800494e:	60bb      	str	r3, [r7, #8]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <vPortFree+0xb8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d115      	bne.n	8004998 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <vPortFree+0xb8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800497c:	f7ff f9ca 	bl	8003d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <vPortFree+0xbc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4413      	add	r3, r2
 800498a:	4a06      	ldr	r2, [pc, #24]	@ (80049a4 <vPortFree+0xbc>)
 800498c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f000 f86c 	bl	8004a6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004994:	f7ff f9cc 	bl	8003d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	200040b8 	.word	0x200040b8
 80049a4:	200040b0 	.word	0x200040b0

080049a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80049b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049b4:	4b27      	ldr	r3, [pc, #156]	@ (8004a54 <prvHeapInit+0xac>)
 80049b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3307      	adds	r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <prvHeapInit+0xac>)
 80049d8:	4413      	add	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <prvHeapInit+0xb0>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a58 <prvHeapInit+0xb0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4413      	add	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049f4:	2208      	movs	r2, #8
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <prvHeapInit+0xb4>)
 8004a08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <prvHeapInit+0xb4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <prvHeapInit+0xb4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a28:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <prvHeapInit+0xb4>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a0a      	ldr	r2, [pc, #40]	@ (8004a60 <prvHeapInit+0xb8>)
 8004a36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <prvHeapInit+0xbc>)
 8004a3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <prvHeapInit+0xc0>)
 8004a42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200004a4 	.word	0x200004a4
 8004a58:	200040a4 	.word	0x200040a4
 8004a5c:	200040ac 	.word	0x200040ac
 8004a60:	200040b4 	.word	0x200040b4
 8004a64:	200040b0 	.word	0x200040b0
 8004a68:	200040b8 	.word	0x200040b8

08004a6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a74:	4b28      	ldr	r3, [pc, #160]	@ (8004b18 <prvInsertBlockIntoFreeList+0xac>)
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e002      	b.n	8004a80 <prvInsertBlockIntoFreeList+0x14>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d8f7      	bhi.n	8004a7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4413      	add	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d108      	bne.n	8004aae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d118      	bne.n	8004af4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <prvInsertBlockIntoFreeList+0xb0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d00d      	beq.n	8004aea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e008      	b.n	8004afc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aea:	4b0c      	ldr	r3, [pc, #48]	@ (8004b1c <prvInsertBlockIntoFreeList+0xb0>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e003      	b.n	8004afc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d002      	beq.n	8004b0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	200040a4 	.word	0x200040a4
 8004b1c:	200040ac 	.word	0x200040ac

08004b20 <std>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	e9c0 3300 	strd	r3, r3, [r0]
 8004b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2e:	6083      	str	r3, [r0, #8]
 8004b30:	8181      	strh	r1, [r0, #12]
 8004b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b34:	81c2      	strh	r2, [r0, #14]
 8004b36:	6183      	str	r3, [r0, #24]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	305c      	adds	r0, #92	@ 0x5c
 8004b3e:	f000 f9e7 	bl	8004f10 <memset>
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <std+0x58>)
 8004b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b46:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <std+0x5c>)
 8004b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x60>)
 8004b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <std+0x64>)
 8004b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <std+0x68>)
 8004b54:	6224      	str	r4, [r4, #32]
 8004b56:	429c      	cmp	r4, r3
 8004b58:	d006      	beq.n	8004b68 <std+0x48>
 8004b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b5e:	4294      	cmp	r4, r2
 8004b60:	d002      	beq.n	8004b68 <std+0x48>
 8004b62:	33d0      	adds	r3, #208	@ 0xd0
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d105      	bne.n	8004b74 <std+0x54>
 8004b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f000 ba46 	b.w	8005000 <__retarget_lock_init_recursive>
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	08004d61 	.word	0x08004d61
 8004b7c:	08004d83 	.word	0x08004d83
 8004b80:	08004dbb 	.word	0x08004dbb
 8004b84:	08004ddf 	.word	0x08004ddf
 8004b88:	200040bc 	.word	0x200040bc

08004b8c <stdio_exit_handler>:
 8004b8c:	4a02      	ldr	r2, [pc, #8]	@ (8004b98 <stdio_exit_handler+0xc>)
 8004b8e:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <stdio_exit_handler+0x10>)
 8004b90:	4803      	ldr	r0, [pc, #12]	@ (8004ba0 <stdio_exit_handler+0x14>)
 8004b92:	f000 b869 	b.w	8004c68 <_fwalk_sglue>
 8004b96:	bf00      	nop
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	08005301 	.word	0x08005301
 8004ba0:	20000020 	.word	0x20000020

08004ba4 <cleanup_stdio>:
 8004ba4:	6841      	ldr	r1, [r0, #4]
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd8 <cleanup_stdio+0x34>)
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	b510      	push	{r4, lr}
 8004bac:	4604      	mov	r4, r0
 8004bae:	d001      	beq.n	8004bb4 <cleanup_stdio+0x10>
 8004bb0:	f000 fba6 	bl	8005300 <_fflush_r>
 8004bb4:	68a1      	ldr	r1, [r4, #8]
 8004bb6:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <cleanup_stdio+0x38>)
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d002      	beq.n	8004bc2 <cleanup_stdio+0x1e>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f000 fb9f 	bl	8005300 <_fflush_r>
 8004bc2:	68e1      	ldr	r1, [r4, #12]
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <cleanup_stdio+0x3c>)
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	d004      	beq.n	8004bd4 <cleanup_stdio+0x30>
 8004bca:	4620      	mov	r0, r4
 8004bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd0:	f000 bb96 	b.w	8005300 <_fflush_r>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200040bc 	.word	0x200040bc
 8004bdc:	20004124 	.word	0x20004124
 8004be0:	2000418c 	.word	0x2000418c

08004be4 <global_stdio_init.part.0>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <global_stdio_init.part.0+0x30>)
 8004be8:	4c0b      	ldr	r4, [pc, #44]	@ (8004c18 <global_stdio_init.part.0+0x34>)
 8004bea:	4a0c      	ldr	r2, [pc, #48]	@ (8004c1c <global_stdio_init.part.0+0x38>)
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2104      	movs	r1, #4
 8004bf4:	f7ff ff94 	bl	8004b20 <std>
 8004bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	2109      	movs	r1, #9
 8004c00:	f7ff ff8e 	bl	8004b20 <std>
 8004c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c08:	2202      	movs	r2, #2
 8004c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0e:	2112      	movs	r1, #18
 8004c10:	f7ff bf86 	b.w	8004b20 <std>
 8004c14:	200041f4 	.word	0x200041f4
 8004c18:	200040bc 	.word	0x200040bc
 8004c1c:	08004b8d 	.word	0x08004b8d

08004c20 <__sfp_lock_acquire>:
 8004c20:	4801      	ldr	r0, [pc, #4]	@ (8004c28 <__sfp_lock_acquire+0x8>)
 8004c22:	f000 b9ee 	b.w	8005002 <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	200041fd 	.word	0x200041fd

08004c2c <__sfp_lock_release>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	@ (8004c34 <__sfp_lock_release+0x8>)
 8004c2e:	f000 b9e9 	b.w	8005004 <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	200041fd 	.word	0x200041fd

08004c38 <__sinit>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	f7ff fff0 	bl	8004c20 <__sfp_lock_acquire>
 8004c40:	6a23      	ldr	r3, [r4, #32]
 8004c42:	b11b      	cbz	r3, 8004c4c <__sinit+0x14>
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f7ff bff0 	b.w	8004c2c <__sfp_lock_release>
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <__sinit+0x28>)
 8004c4e:	6223      	str	r3, [r4, #32]
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <__sinit+0x2c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f5      	bne.n	8004c44 <__sinit+0xc>
 8004c58:	f7ff ffc4 	bl	8004be4 <global_stdio_init.part.0>
 8004c5c:	e7f2      	b.n	8004c44 <__sinit+0xc>
 8004c5e:	bf00      	nop
 8004c60:	08004ba5 	.word	0x08004ba5
 8004c64:	200041f4 	.word	0x200041f4

08004c68 <_fwalk_sglue>:
 8004c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4688      	mov	r8, r1
 8004c70:	4614      	mov	r4, r2
 8004c72:	2600      	movs	r6, #0
 8004c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c78:	f1b9 0901 	subs.w	r9, r9, #1
 8004c7c:	d505      	bpl.n	8004c8a <_fwalk_sglue+0x22>
 8004c7e:	6824      	ldr	r4, [r4, #0]
 8004c80:	2c00      	cmp	r4, #0
 8004c82:	d1f7      	bne.n	8004c74 <_fwalk_sglue+0xc>
 8004c84:	4630      	mov	r0, r6
 8004c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c8a:	89ab      	ldrh	r3, [r5, #12]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d907      	bls.n	8004ca0 <_fwalk_sglue+0x38>
 8004c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c94:	3301      	adds	r3, #1
 8004c96:	d003      	beq.n	8004ca0 <_fwalk_sglue+0x38>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c0      	blx	r8
 8004c9e:	4306      	orrs	r6, r0
 8004ca0:	3568      	adds	r5, #104	@ 0x68
 8004ca2:	e7e9      	b.n	8004c78 <_fwalk_sglue+0x10>

08004ca4 <_puts_r>:
 8004ca4:	6a03      	ldr	r3, [r0, #32]
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	6884      	ldr	r4, [r0, #8]
 8004caa:	4605      	mov	r5, r0
 8004cac:	460e      	mov	r6, r1
 8004cae:	b90b      	cbnz	r3, 8004cb4 <_puts_r+0x10>
 8004cb0:	f7ff ffc2 	bl	8004c38 <__sinit>
 8004cb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cb6:	07db      	lsls	r3, r3, #31
 8004cb8:	d405      	bmi.n	8004cc6 <_puts_r+0x22>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	0598      	lsls	r0, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_puts_r+0x22>
 8004cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cc2:	f000 f99e 	bl	8005002 <__retarget_lock_acquire_recursive>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d502      	bpl.n	8004cd2 <_puts_r+0x2e>
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d135      	bne.n	8004d3e <_puts_r+0x9a>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 f8c5 	bl	8004e64 <__swsetup_r>
 8004cda:	b380      	cbz	r0, 8004d3e <_puts_r+0x9a>
 8004cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8004ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ce2:	07da      	lsls	r2, r3, #31
 8004ce4:	d405      	bmi.n	8004cf2 <_puts_r+0x4e>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	059b      	lsls	r3, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_puts_r+0x4e>
 8004cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cee:	f000 f989 	bl	8005004 <__retarget_lock_release_recursive>
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da04      	bge.n	8004d04 <_puts_r+0x60>
 8004cfa:	69a2      	ldr	r2, [r4, #24]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	dc17      	bgt.n	8004d30 <_puts_r+0x8c>
 8004d00:	290a      	cmp	r1, #10
 8004d02:	d015      	beq.n	8004d30 <_puts_r+0x8c>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	7019      	strb	r1, [r3, #0]
 8004d0c:	68a3      	ldr	r3, [r4, #8]
 8004d0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60a3      	str	r3, [r4, #8]
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d1ed      	bne.n	8004cf6 <_puts_r+0x52>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da11      	bge.n	8004d42 <_puts_r+0x9e>
 8004d1e:	4622      	mov	r2, r4
 8004d20:	210a      	movs	r1, #10
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 f85f 	bl	8004de6 <__swbuf_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0d7      	beq.n	8004cdc <_puts_r+0x38>
 8004d2c:	250a      	movs	r5, #10
 8004d2e:	e7d7      	b.n	8004ce0 <_puts_r+0x3c>
 8004d30:	4622      	mov	r2, r4
 8004d32:	4628      	mov	r0, r5
 8004d34:	f000 f857 	bl	8004de6 <__swbuf_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d1e7      	bne.n	8004d0c <_puts_r+0x68>
 8004d3c:	e7ce      	b.n	8004cdc <_puts_r+0x38>
 8004d3e:	3e01      	subs	r6, #1
 8004d40:	e7e4      	b.n	8004d0c <_puts_r+0x68>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	6022      	str	r2, [r4, #0]
 8004d48:	220a      	movs	r2, #10
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e7ee      	b.n	8004d2c <_puts_r+0x88>
	...

08004d50 <puts>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	@ (8004d5c <puts+0xc>)
 8004d52:	4601      	mov	r1, r0
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f7ff bfa5 	b.w	8004ca4 <_puts_r>
 8004d5a:	bf00      	nop
 8004d5c:	2000001c 	.word	0x2000001c

08004d60 <__sread>:
 8004d60:	b510      	push	{r4, lr}
 8004d62:	460c      	mov	r4, r1
 8004d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d68:	f000 f8fc 	bl	8004f64 <_read_r>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	bfab      	itete	ge
 8004d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d72:	89a3      	ldrhlt	r3, [r4, #12]
 8004d74:	181b      	addge	r3, r3, r0
 8004d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d7a:	bfac      	ite	ge
 8004d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d7e:	81a3      	strhlt	r3, [r4, #12]
 8004d80:	bd10      	pop	{r4, pc}

08004d82 <__swrite>:
 8004d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	461f      	mov	r7, r3
 8004d88:	898b      	ldrh	r3, [r1, #12]
 8004d8a:	05db      	lsls	r3, r3, #23
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	4616      	mov	r6, r2
 8004d92:	d505      	bpl.n	8004da0 <__swrite+0x1e>
 8004d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d98:	2302      	movs	r3, #2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f000 f8d0 	bl	8004f40 <_lseek_r>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	4632      	mov	r2, r6
 8004dae:	463b      	mov	r3, r7
 8004db0:	4628      	mov	r0, r5
 8004db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db6:	f000 b8e7 	b.w	8004f88 <_write_r>

08004dba <__sseek>:
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc2:	f000 f8bd 	bl	8004f40 <_lseek_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	bf15      	itete	ne
 8004dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004dd6:	81a3      	strheq	r3, [r4, #12]
 8004dd8:	bf18      	it	ne
 8004dda:	81a3      	strhne	r3, [r4, #12]
 8004ddc:	bd10      	pop	{r4, pc}

08004dde <__sclose>:
 8004dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de2:	f000 b89d 	b.w	8004f20 <_close_r>

08004de6 <__swbuf_r>:
 8004de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de8:	460e      	mov	r6, r1
 8004dea:	4614      	mov	r4, r2
 8004dec:	4605      	mov	r5, r0
 8004dee:	b118      	cbz	r0, 8004df8 <__swbuf_r+0x12>
 8004df0:	6a03      	ldr	r3, [r0, #32]
 8004df2:	b90b      	cbnz	r3, 8004df8 <__swbuf_r+0x12>
 8004df4:	f7ff ff20 	bl	8004c38 <__sinit>
 8004df8:	69a3      	ldr	r3, [r4, #24]
 8004dfa:	60a3      	str	r3, [r4, #8]
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	071a      	lsls	r2, r3, #28
 8004e00:	d501      	bpl.n	8004e06 <__swbuf_r+0x20>
 8004e02:	6923      	ldr	r3, [r4, #16]
 8004e04:	b943      	cbnz	r3, 8004e18 <__swbuf_r+0x32>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f82b 	bl	8004e64 <__swsetup_r>
 8004e0e:	b118      	cbz	r0, 8004e18 <__swbuf_r+0x32>
 8004e10:	f04f 37ff 	mov.w	r7, #4294967295
 8004e14:	4638      	mov	r0, r7
 8004e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	6922      	ldr	r2, [r4, #16]
 8004e1c:	1a98      	subs	r0, r3, r2
 8004e1e:	6963      	ldr	r3, [r4, #20]
 8004e20:	b2f6      	uxtb	r6, r6
 8004e22:	4283      	cmp	r3, r0
 8004e24:	4637      	mov	r7, r6
 8004e26:	dc05      	bgt.n	8004e34 <__swbuf_r+0x4e>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 fa68 	bl	8005300 <_fflush_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d1ed      	bne.n	8004e10 <__swbuf_r+0x2a>
 8004e34:	68a3      	ldr	r3, [r4, #8]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	6022      	str	r2, [r4, #0]
 8004e40:	701e      	strb	r6, [r3, #0]
 8004e42:	6962      	ldr	r2, [r4, #20]
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d004      	beq.n	8004e54 <__swbuf_r+0x6e>
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	07db      	lsls	r3, r3, #31
 8004e4e:	d5e1      	bpl.n	8004e14 <__swbuf_r+0x2e>
 8004e50:	2e0a      	cmp	r6, #10
 8004e52:	d1df      	bne.n	8004e14 <__swbuf_r+0x2e>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fa52 	bl	8005300 <_fflush_r>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d0d9      	beq.n	8004e14 <__swbuf_r+0x2e>
 8004e60:	e7d6      	b.n	8004e10 <__swbuf_r+0x2a>
	...

08004e64 <__swsetup_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <__swsetup_r+0xa8>)
 8004e68:	4605      	mov	r5, r0
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	b118      	cbz	r0, 8004e78 <__swsetup_r+0x14>
 8004e70:	6a03      	ldr	r3, [r0, #32]
 8004e72:	b90b      	cbnz	r3, 8004e78 <__swsetup_r+0x14>
 8004e74:	f7ff fee0 	bl	8004c38 <__sinit>
 8004e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7c:	0719      	lsls	r1, r3, #28
 8004e7e:	d422      	bmi.n	8004ec6 <__swsetup_r+0x62>
 8004e80:	06da      	lsls	r2, r3, #27
 8004e82:	d407      	bmi.n	8004e94 <__swsetup_r+0x30>
 8004e84:	2209      	movs	r2, #9
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8c:	81a3      	strh	r3, [r4, #12]
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e92:	e033      	b.n	8004efc <__swsetup_r+0x98>
 8004e94:	0758      	lsls	r0, r3, #29
 8004e96:	d512      	bpl.n	8004ebe <__swsetup_r+0x5a>
 8004e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e9a:	b141      	cbz	r1, 8004eae <__swsetup_r+0x4a>
 8004e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <__swsetup_r+0x46>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f8af 	bl	8005008 <_free_r>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	b94b      	cbnz	r3, 8004ede <__swsetup_r+0x7a>
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed4:	d003      	beq.n	8004ede <__swsetup_r+0x7a>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 fa5f 	bl	800539c <__smakebuf_r>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	f013 0201 	ands.w	r2, r3, #1
 8004ee6:	d00a      	beq.n	8004efe <__swsetup_r+0x9a>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60a2      	str	r2, [r4, #8]
 8004eec:	6962      	ldr	r2, [r4, #20]
 8004eee:	4252      	negs	r2, r2
 8004ef0:	61a2      	str	r2, [r4, #24]
 8004ef2:	6922      	ldr	r2, [r4, #16]
 8004ef4:	b942      	cbnz	r2, 8004f08 <__swsetup_r+0xa4>
 8004ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004efa:	d1c5      	bne.n	8004e88 <__swsetup_r+0x24>
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	0799      	lsls	r1, r3, #30
 8004f00:	bf58      	it	pl
 8004f02:	6962      	ldrpl	r2, [r4, #20]
 8004f04:	60a2      	str	r2, [r4, #8]
 8004f06:	e7f4      	b.n	8004ef2 <__swsetup_r+0x8e>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e7f7      	b.n	8004efc <__swsetup_r+0x98>
 8004f0c:	2000001c 	.word	0x2000001c

08004f10 <memset>:
 8004f10:	4402      	add	r2, r0
 8004f12:	4603      	mov	r3, r0
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d100      	bne.n	8004f1a <memset+0xa>
 8004f18:	4770      	bx	lr
 8004f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1e:	e7f9      	b.n	8004f14 <memset+0x4>

08004f20 <_close_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	@ (8004f3c <_close_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fc f8fb 	bl	8001126 <_close>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_close_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_close_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200041f8 	.word	0x200041f8

08004f40 <_lseek_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	@ (8004f60 <_lseek_r+0x20>)
 8004f44:	4604      	mov	r4, r0
 8004f46:	4608      	mov	r0, r1
 8004f48:	4611      	mov	r1, r2
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f7fc f910 	bl	8001174 <_lseek>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_lseek_r+0x1e>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_lseek_r+0x1e>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	200041f8 	.word	0x200041f8

08004f64 <_read_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	@ (8004f84 <_read_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fc f89e 	bl	80010b4 <_read>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_read_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_read_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	200041f8 	.word	0x200041f8

08004f88 <_write_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	@ (8004fa8 <_write_r+0x20>)
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7fc f8a9 	bl	80010ee <_write>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_write_r+0x1e>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_write_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	200041f8 	.word	0x200041f8

08004fac <__errno>:
 8004fac:	4b01      	ldr	r3, [pc, #4]	@ (8004fb4 <__errno+0x8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000001c 	.word	0x2000001c

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4d0d      	ldr	r5, [pc, #52]	@ (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	@ (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 fa54 	bl	8005478 <_init>
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005514 	.word	0x08005514
 8004ff4:	08005514 	.word	0x08005514
 8004ff8:	08005514 	.word	0x08005514
 8004ffc:	08005518 	.word	0x08005518

08005000 <__retarget_lock_init_recursive>:
 8005000:	4770      	bx	lr

08005002 <__retarget_lock_acquire_recursive>:
 8005002:	4770      	bx	lr

08005004 <__retarget_lock_release_recursive>:
 8005004:	4770      	bx	lr
	...

08005008 <_free_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4605      	mov	r5, r0
 800500c:	2900      	cmp	r1, #0
 800500e:	d041      	beq.n	8005094 <_free_r+0x8c>
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f0c      	subs	r4, r1, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	18e4      	addlt	r4, r4, r3
 800501c:	f000 f8e0 	bl	80051e0 <__malloc_lock>
 8005020:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <_free_r+0x90>)
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	b933      	cbnz	r3, 8005034 <_free_r+0x2c>
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6014      	str	r4, [r2, #0]
 800502a:	4628      	mov	r0, r5
 800502c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005030:	f000 b8dc 	b.w	80051ec <__malloc_unlock>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d908      	bls.n	800504a <_free_r+0x42>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	1821      	adds	r1, r4, r0
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1809      	addeq	r1, r1, r0
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	e7ed      	b.n	8005026 <_free_r+0x1e>
 800504a:	461a      	mov	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b10b      	cbz	r3, 8005054 <_free_r+0x4c>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d9fa      	bls.n	800504a <_free_r+0x42>
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	1850      	adds	r0, r2, r1
 8005058:	42a0      	cmp	r0, r4
 800505a:	d10b      	bne.n	8005074 <_free_r+0x6c>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	4401      	add	r1, r0
 8005060:	1850      	adds	r0, r2, r1
 8005062:	4283      	cmp	r3, r0
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	d1e0      	bne.n	800502a <_free_r+0x22>
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	4408      	add	r0, r1
 8005070:	6010      	str	r0, [r2, #0]
 8005072:	e7da      	b.n	800502a <_free_r+0x22>
 8005074:	d902      	bls.n	800507c <_free_r+0x74>
 8005076:	230c      	movs	r3, #12
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	e7d6      	b.n	800502a <_free_r+0x22>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	1821      	adds	r1, r4, r0
 8005080:	428b      	cmp	r3, r1
 8005082:	bf04      	itt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	bf04      	itt	eq
 800508c:	1809      	addeq	r1, r1, r0
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	6054      	str	r4, [r2, #4]
 8005092:	e7ca      	b.n	800502a <_free_r+0x22>
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	20004204 	.word	0x20004204

0800509c <sbrk_aligned>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0f      	ldr	r6, [pc, #60]	@ (80050dc <sbrk_aligned+0x40>)
 80050a0:	460c      	mov	r4, r1
 80050a2:	6831      	ldr	r1, [r6, #0]
 80050a4:	4605      	mov	r5, r0
 80050a6:	b911      	cbnz	r1, 80050ae <sbrk_aligned+0x12>
 80050a8:	f000 f9d6 	bl	8005458 <_sbrk_r>
 80050ac:	6030      	str	r0, [r6, #0]
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f9d1 	bl	8005458 <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d103      	bne.n	80050c2 <sbrk_aligned+0x26>
 80050ba:	f04f 34ff 	mov.w	r4, #4294967295
 80050be:	4620      	mov	r0, r4
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	1cc4      	adds	r4, r0, #3
 80050c4:	f024 0403 	bic.w	r4, r4, #3
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d0f8      	beq.n	80050be <sbrk_aligned+0x22>
 80050cc:	1a21      	subs	r1, r4, r0
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 f9c2 	bl	8005458 <_sbrk_r>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d1f2      	bne.n	80050be <sbrk_aligned+0x22>
 80050d8:	e7ef      	b.n	80050ba <sbrk_aligned+0x1e>
 80050da:	bf00      	nop
 80050dc:	20004200 	.word	0x20004200

080050e0 <_malloc_r>:
 80050e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e4:	1ccd      	adds	r5, r1, #3
 80050e6:	f025 0503 	bic.w	r5, r5, #3
 80050ea:	3508      	adds	r5, #8
 80050ec:	2d0c      	cmp	r5, #12
 80050ee:	bf38      	it	cc
 80050f0:	250c      	movcc	r5, #12
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	4606      	mov	r6, r0
 80050f6:	db01      	blt.n	80050fc <_malloc_r+0x1c>
 80050f8:	42a9      	cmp	r1, r5
 80050fa:	d904      	bls.n	8005106 <_malloc_r+0x26>
 80050fc:	230c      	movs	r3, #12
 80050fe:	6033      	str	r3, [r6, #0]
 8005100:	2000      	movs	r0, #0
 8005102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051dc <_malloc_r+0xfc>
 800510a:	f000 f869 	bl	80051e0 <__malloc_lock>
 800510e:	f8d8 3000 	ldr.w	r3, [r8]
 8005112:	461c      	mov	r4, r3
 8005114:	bb44      	cbnz	r4, 8005168 <_malloc_r+0x88>
 8005116:	4629      	mov	r1, r5
 8005118:	4630      	mov	r0, r6
 800511a:	f7ff ffbf 	bl	800509c <sbrk_aligned>
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	4604      	mov	r4, r0
 8005122:	d158      	bne.n	80051d6 <_malloc_r+0xf6>
 8005124:	f8d8 4000 	ldr.w	r4, [r8]
 8005128:	4627      	mov	r7, r4
 800512a:	2f00      	cmp	r7, #0
 800512c:	d143      	bne.n	80051b6 <_malloc_r+0xd6>
 800512e:	2c00      	cmp	r4, #0
 8005130:	d04b      	beq.n	80051ca <_malloc_r+0xea>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	4639      	mov	r1, r7
 8005136:	4630      	mov	r0, r6
 8005138:	eb04 0903 	add.w	r9, r4, r3
 800513c:	f000 f98c 	bl	8005458 <_sbrk_r>
 8005140:	4581      	cmp	r9, r0
 8005142:	d142      	bne.n	80051ca <_malloc_r+0xea>
 8005144:	6821      	ldr	r1, [r4, #0]
 8005146:	1a6d      	subs	r5, r5, r1
 8005148:	4629      	mov	r1, r5
 800514a:	4630      	mov	r0, r6
 800514c:	f7ff ffa6 	bl	800509c <sbrk_aligned>
 8005150:	3001      	adds	r0, #1
 8005152:	d03a      	beq.n	80051ca <_malloc_r+0xea>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	442b      	add	r3, r5
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	f8d8 3000 	ldr.w	r3, [r8]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	bb62      	cbnz	r2, 80051bc <_malloc_r+0xdc>
 8005162:	f8c8 7000 	str.w	r7, [r8]
 8005166:	e00f      	b.n	8005188 <_malloc_r+0xa8>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	1b52      	subs	r2, r2, r5
 800516c:	d420      	bmi.n	80051b0 <_malloc_r+0xd0>
 800516e:	2a0b      	cmp	r2, #11
 8005170:	d917      	bls.n	80051a2 <_malloc_r+0xc2>
 8005172:	1961      	adds	r1, r4, r5
 8005174:	42a3      	cmp	r3, r4
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	6059      	strne	r1, [r3, #4]
 800517c:	6863      	ldr	r3, [r4, #4]
 800517e:	bf08      	it	eq
 8005180:	f8c8 1000 	streq.w	r1, [r8]
 8005184:	5162      	str	r2, [r4, r5]
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	4630      	mov	r0, r6
 800518a:	f000 f82f 	bl	80051ec <__malloc_unlock>
 800518e:	f104 000b 	add.w	r0, r4, #11
 8005192:	1d23      	adds	r3, r4, #4
 8005194:	f020 0007 	bic.w	r0, r0, #7
 8005198:	1ac2      	subs	r2, r0, r3
 800519a:	bf1c      	itt	ne
 800519c:	1a1b      	subne	r3, r3, r0
 800519e:	50a3      	strne	r3, [r4, r2]
 80051a0:	e7af      	b.n	8005102 <_malloc_r+0x22>
 80051a2:	6862      	ldr	r2, [r4, #4]
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	bf0c      	ite	eq
 80051a8:	f8c8 2000 	streq.w	r2, [r8]
 80051ac:	605a      	strne	r2, [r3, #4]
 80051ae:	e7eb      	b.n	8005188 <_malloc_r+0xa8>
 80051b0:	4623      	mov	r3, r4
 80051b2:	6864      	ldr	r4, [r4, #4]
 80051b4:	e7ae      	b.n	8005114 <_malloc_r+0x34>
 80051b6:	463c      	mov	r4, r7
 80051b8:	687f      	ldr	r7, [r7, #4]
 80051ba:	e7b6      	b.n	800512a <_malloc_r+0x4a>
 80051bc:	461a      	mov	r2, r3
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d1fb      	bne.n	80051bc <_malloc_r+0xdc>
 80051c4:	2300      	movs	r3, #0
 80051c6:	6053      	str	r3, [r2, #4]
 80051c8:	e7de      	b.n	8005188 <_malloc_r+0xa8>
 80051ca:	230c      	movs	r3, #12
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	4630      	mov	r0, r6
 80051d0:	f000 f80c 	bl	80051ec <__malloc_unlock>
 80051d4:	e794      	b.n	8005100 <_malloc_r+0x20>
 80051d6:	6005      	str	r5, [r0, #0]
 80051d8:	e7d6      	b.n	8005188 <_malloc_r+0xa8>
 80051da:	bf00      	nop
 80051dc:	20004204 	.word	0x20004204

080051e0 <__malloc_lock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	@ (80051e8 <__malloc_lock+0x8>)
 80051e2:	f7ff bf0e 	b.w	8005002 <__retarget_lock_acquire_recursive>
 80051e6:	bf00      	nop
 80051e8:	200041fc 	.word	0x200041fc

080051ec <__malloc_unlock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__malloc_unlock+0x8>)
 80051ee:	f7ff bf09 	b.w	8005004 <__retarget_lock_release_recursive>
 80051f2:	bf00      	nop
 80051f4:	200041fc 	.word	0x200041fc

080051f8 <__sflush_r>:
 80051f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005200:	0716      	lsls	r6, r2, #28
 8005202:	4605      	mov	r5, r0
 8005204:	460c      	mov	r4, r1
 8005206:	d454      	bmi.n	80052b2 <__sflush_r+0xba>
 8005208:	684b      	ldr	r3, [r1, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dc02      	bgt.n	8005214 <__sflush_r+0x1c>
 800520e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	dd48      	ble.n	80052a6 <__sflush_r+0xae>
 8005214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005216:	2e00      	cmp	r6, #0
 8005218:	d045      	beq.n	80052a6 <__sflush_r+0xae>
 800521a:	2300      	movs	r3, #0
 800521c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005220:	682f      	ldr	r7, [r5, #0]
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	d030      	beq.n	800528a <__sflush_r+0x92>
 8005228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	0759      	lsls	r1, r3, #29
 800522e:	d505      	bpl.n	800523c <__sflush_r+0x44>
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005236:	b10b      	cbz	r3, 800523c <__sflush_r+0x44>
 8005238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005240:	6a21      	ldr	r1, [r4, #32]
 8005242:	4628      	mov	r0, r5
 8005244:	47b0      	blx	r6
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	d106      	bne.n	800525a <__sflush_r+0x62>
 800524c:	6829      	ldr	r1, [r5, #0]
 800524e:	291d      	cmp	r1, #29
 8005250:	d82b      	bhi.n	80052aa <__sflush_r+0xb2>
 8005252:	4a2a      	ldr	r2, [pc, #168]	@ (80052fc <__sflush_r+0x104>)
 8005254:	410a      	asrs	r2, r1
 8005256:	07d6      	lsls	r6, r2, #31
 8005258:	d427      	bmi.n	80052aa <__sflush_r+0xb2>
 800525a:	2200      	movs	r2, #0
 800525c:	6062      	str	r2, [r4, #4]
 800525e:	04d9      	lsls	r1, r3, #19
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	6022      	str	r2, [r4, #0]
 8005264:	d504      	bpl.n	8005270 <__sflush_r+0x78>
 8005266:	1c42      	adds	r2, r0, #1
 8005268:	d101      	bne.n	800526e <__sflush_r+0x76>
 800526a:	682b      	ldr	r3, [r5, #0]
 800526c:	b903      	cbnz	r3, 8005270 <__sflush_r+0x78>
 800526e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005272:	602f      	str	r7, [r5, #0]
 8005274:	b1b9      	cbz	r1, 80052a6 <__sflush_r+0xae>
 8005276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800527a:	4299      	cmp	r1, r3
 800527c:	d002      	beq.n	8005284 <__sflush_r+0x8c>
 800527e:	4628      	mov	r0, r5
 8005280:	f7ff fec2 	bl	8005008 <_free_r>
 8005284:	2300      	movs	r3, #0
 8005286:	6363      	str	r3, [r4, #52]	@ 0x34
 8005288:	e00d      	b.n	80052a6 <__sflush_r+0xae>
 800528a:	2301      	movs	r3, #1
 800528c:	4628      	mov	r0, r5
 800528e:	47b0      	blx	r6
 8005290:	4602      	mov	r2, r0
 8005292:	1c50      	adds	r0, r2, #1
 8005294:	d1c9      	bne.n	800522a <__sflush_r+0x32>
 8005296:	682b      	ldr	r3, [r5, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0c6      	beq.n	800522a <__sflush_r+0x32>
 800529c:	2b1d      	cmp	r3, #29
 800529e:	d001      	beq.n	80052a4 <__sflush_r+0xac>
 80052a0:	2b16      	cmp	r3, #22
 80052a2:	d11e      	bne.n	80052e2 <__sflush_r+0xea>
 80052a4:	602f      	str	r7, [r5, #0]
 80052a6:	2000      	movs	r0, #0
 80052a8:	e022      	b.n	80052f0 <__sflush_r+0xf8>
 80052aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	e01b      	b.n	80052ea <__sflush_r+0xf2>
 80052b2:	690f      	ldr	r7, [r1, #16]
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	d0f6      	beq.n	80052a6 <__sflush_r+0xae>
 80052b8:	0793      	lsls	r3, r2, #30
 80052ba:	680e      	ldr	r6, [r1, #0]
 80052bc:	bf08      	it	eq
 80052be:	694b      	ldreq	r3, [r1, #20]
 80052c0:	600f      	str	r7, [r1, #0]
 80052c2:	bf18      	it	ne
 80052c4:	2300      	movne	r3, #0
 80052c6:	eba6 0807 	sub.w	r8, r6, r7
 80052ca:	608b      	str	r3, [r1, #8]
 80052cc:	f1b8 0f00 	cmp.w	r8, #0
 80052d0:	dde9      	ble.n	80052a6 <__sflush_r+0xae>
 80052d2:	6a21      	ldr	r1, [r4, #32]
 80052d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052d6:	4643      	mov	r3, r8
 80052d8:	463a      	mov	r2, r7
 80052da:	4628      	mov	r0, r5
 80052dc:	47b0      	blx	r6
 80052de:	2800      	cmp	r0, #0
 80052e0:	dc08      	bgt.n	80052f4 <__sflush_r+0xfc>
 80052e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f4:	4407      	add	r7, r0
 80052f6:	eba8 0800 	sub.w	r8, r8, r0
 80052fa:	e7e7      	b.n	80052cc <__sflush_r+0xd4>
 80052fc:	dfbffffe 	.word	0xdfbffffe

08005300 <_fflush_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b913      	cbnz	r3, 8005310 <_fflush_r+0x10>
 800530a:	2500      	movs	r5, #0
 800530c:	4628      	mov	r0, r5
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	b118      	cbz	r0, 800531a <_fflush_r+0x1a>
 8005312:	6a03      	ldr	r3, [r0, #32]
 8005314:	b90b      	cbnz	r3, 800531a <_fflush_r+0x1a>
 8005316:	f7ff fc8f 	bl	8004c38 <__sinit>
 800531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f3      	beq.n	800530a <_fflush_r+0xa>
 8005322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005324:	07d0      	lsls	r0, r2, #31
 8005326:	d404      	bmi.n	8005332 <_fflush_r+0x32>
 8005328:	0599      	lsls	r1, r3, #22
 800532a:	d402      	bmi.n	8005332 <_fflush_r+0x32>
 800532c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800532e:	f7ff fe68 	bl	8005002 <__retarget_lock_acquire_recursive>
 8005332:	4628      	mov	r0, r5
 8005334:	4621      	mov	r1, r4
 8005336:	f7ff ff5f 	bl	80051f8 <__sflush_r>
 800533a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800533c:	07da      	lsls	r2, r3, #31
 800533e:	4605      	mov	r5, r0
 8005340:	d4e4      	bmi.n	800530c <_fflush_r+0xc>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	059b      	lsls	r3, r3, #22
 8005346:	d4e1      	bmi.n	800530c <_fflush_r+0xc>
 8005348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800534a:	f7ff fe5b 	bl	8005004 <__retarget_lock_release_recursive>
 800534e:	e7dd      	b.n	800530c <_fflush_r+0xc>

08005350 <__swhatbuf_r>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	460c      	mov	r4, r1
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	2900      	cmp	r1, #0
 800535a:	b096      	sub	sp, #88	@ 0x58
 800535c:	4615      	mov	r5, r2
 800535e:	461e      	mov	r6, r3
 8005360:	da0d      	bge.n	800537e <__swhatbuf_r+0x2e>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	bf14      	ite	ne
 800536e:	2340      	movne	r3, #64	@ 0x40
 8005370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005374:	2000      	movs	r0, #0
 8005376:	6031      	str	r1, [r6, #0]
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	b016      	add	sp, #88	@ 0x58
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	466a      	mov	r2, sp
 8005380:	f000 f848 	bl	8005414 <_fstat_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	dbec      	blt.n	8005362 <__swhatbuf_r+0x12>
 8005388:	9901      	ldr	r1, [sp, #4]
 800538a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800538e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005392:	4259      	negs	r1, r3
 8005394:	4159      	adcs	r1, r3
 8005396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800539a:	e7eb      	b.n	8005374 <__swhatbuf_r+0x24>

0800539c <__smakebuf_r>:
 800539c:	898b      	ldrh	r3, [r1, #12]
 800539e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a0:	079d      	lsls	r5, r3, #30
 80053a2:	4606      	mov	r6, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	d507      	bpl.n	80053b8 <__smakebuf_r+0x1c>
 80053a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	2301      	movs	r3, #1
 80053b2:	6163      	str	r3, [r4, #20]
 80053b4:	b003      	add	sp, #12
 80053b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b8:	ab01      	add	r3, sp, #4
 80053ba:	466a      	mov	r2, sp
 80053bc:	f7ff ffc8 	bl	8005350 <__swhatbuf_r>
 80053c0:	9f00      	ldr	r7, [sp, #0]
 80053c2:	4605      	mov	r5, r0
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff fe8a 	bl	80050e0 <_malloc_r>
 80053cc:	b948      	cbnz	r0, 80053e2 <__smakebuf_r+0x46>
 80053ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d2:	059a      	lsls	r2, r3, #22
 80053d4:	d4ee      	bmi.n	80053b4 <__smakebuf_r+0x18>
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	81a3      	strh	r3, [r4, #12]
 80053e0:	e7e2      	b.n	80053a8 <__smakebuf_r+0xc>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	6020      	str	r0, [r4, #0]
 80053e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053f2:	b15b      	cbz	r3, 800540c <__smakebuf_r+0x70>
 80053f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 f81d 	bl	8005438 <_isatty_r>
 80053fe:	b128      	cbz	r0, 800540c <__smakebuf_r+0x70>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	431d      	orrs	r5, r3
 8005410:	81a5      	strh	r5, [r4, #12]
 8005412:	e7cf      	b.n	80053b4 <__smakebuf_r+0x18>

08005414 <_fstat_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	@ (8005434 <_fstat_r+0x20>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	f7fb fe8c 	bl	800113e <_fstat>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d102      	bne.n	8005430 <_fstat_r+0x1c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b103      	cbz	r3, 8005430 <_fstat_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	200041f8 	.word	0x200041f8

08005438 <_isatty_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	@ (8005454 <_isatty_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fe8b 	bl	800115e <_isatty>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_isatty_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_isatty_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200041f8 	.word	0x200041f8

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fe94 	bl	8001190 <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200041f8 	.word	0x200041f8

08005478 <_init>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr

08005484 <_fini>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr
